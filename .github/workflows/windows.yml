name: Windows
on:
  push:
    branches:
      - 'master'
    tags-ignore:
      - '**'
  pull_request:
    paths-ignore:
      - 'docs/*'
      - '*.yml'
      - '*.md'
      - 'LICENSE'

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: "Build & Test"
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - windows-latest
        version:
          - mini
          - full
        arch:
          - amd64
    steps:
      - name: "Checkout"
        uses: actions/checkout@main
        with:
          submodules: recursive

      - uses: msys2/setup-msys2@v2
        with:
          update: true
          install: 'git base-devel'

      - name: Install dependencies + Build Arturo (full)
        if: matrix.version == 'full'
        shell: msys2 {0}
        run: |
          pacman --noconfirm -S mingw-w64-x86_64-bzip2=1.0.8-3  mingw-w64-x86_64-expat=2.6.2-1  mingw-w64-x86_64-gcc-libs=13.2.0-6  mingw-w64-x86_64-gettext-runtime=0.22.5-2  mingw-w64-x86_64-gmp=6.3.0-2  mingw-w64-x86_64-isl=0.26-1  mingw-w64-x86_64-libffi=3.4.6-1  mingw-w64-x86_64-libiconv=1.17-4  mingw-w64-x86_64-libsystre=1.0.1-5  mingw-w64-x86_64-libtre=git-r177.07e66d0-2  mingw-w64-x86_64-mpc=1.3.1-2  mingw-w64-x86_64-mpdecimal=4.0.0-1  mingw-w64-x86_64-mpfr=4.2.1-2  mingw-w64-x86_64-ncurses=6.4.20231217-1  mingw-w64-x86_64-openssl=3.3.0-2  mingw-w64-x86_64-python=3.11.9-1  mingw-w64-x86_64-readline=8.2.010-1  mingw-w64-x86_64-sqlite3=3.45.2-1  mingw-w64-x86_64-tcl=8.6.13-1  mingw-w64-x86_64-termcap=1.3.1-7  mingw-w64-x86_64-tk=8.6.13-1  mingw-w64-x86_64-tzdata=2024a-1  mingw-w64-x86_64-windows-default-manifest=6.4-4  mingw-w64-x86_64-xxhash=0.8.2-2  mingw-w64-x86_64-xz=5.6.1-2  mingw-w64-x86_64-zlib=1.3.1-1  mingw-w64-x86_64-zstd=1.5.6-2  mingw-w64-x86_64-binutils=2.42-2  mingw-w64-x86_64-crt=git-11.0.0.r731.g8fdf7c9b5-1  mingw-w64-x86_64-gcc=13.2.0-6  mingw-w64-x86_64-gdb=14.2-1  mingw-w64-x86_64-gdb-multiarch=14.2-1  mingw-w64-x86_64-headers=git-11.0.0.r731.g8fdf7c9b5-1  mingw-w64-x86_64-libmangle=git-11.0.0.r731.g8fdf7c9b5-1  mingw-w64-x86_64-libwinpthread=git-11.0.0.r731.g8fdf7c9b5-1  mingw-w64-x86_64-make=4.4.1-2  mingw-w64-x86_64-pkgconf=1~2.2.0-1  mingw-w64-x86_64-tools=git-11.0.0.r731.g8fdf7c9b5-1  mingw-w64-x86_64-winpthreads=git-11.0.0.r731.g8fdf7c9b5-1  mingw-w64-x86_64-winstorecompat=git-11.0.0.r731.g8fdf7c9b5-1  
          mkdir dist
          mkdir nim
          curl -L https://nim-lang.org/download/dlls.zip -o dist/dlls.zip
          curl -L https://arturo-lang.s3.amazonaws.com/extra-dlls.zip -o dist/extradlls.zip
          curl -L https://nim-lang.org/download/nim-2.0.0_x64.zip -o dist/nim.zip
          7z x dist/dlls.zip -obin
          7z x dist/extradlls.zip -obin
          7z x dist/nim.zip -onim

          cp src/extras/webview/deps/dlls/x64/*.dll bin
          
          export PATH="${{ github.workspace }}/nim/nim-2.0.0/bin":$PATH

          nim --version

          ./build.nims build --mode ${{ matrix.version }} --log

      - name: Install dependencies + Build Arturo (mini)
        if: matrix.version == 'mini'
        shell: msys2 {0}
        run: |
          pacman --noconfirm -S p7zip mingw-w64-x86_64-toolchain
          mkdir dist
          mkdir nim
          curl -L https://nim-lang.org/download/dlls.zip -o dist/dlls.zip
          curl -L https://nim-lang.org/download/nim-2.0.0_x64.zip -o dist/nim.zip
          7z x dist/dlls.zip -obin
          7z x dist/nim.zip -onim
          
          export PATH="${{ github.workspace }}/nim/nim-2.0.0/bin":$PATH

          ./build.nims build --mode ${{ matrix.version }} --log

      - name: Run unit tests (full)
        if: matrix.version == 'full'
        shell: msys2 {0}
        run: |
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          ./bin/arturo tools/tester.art
          ./bin/arturo tools/unitt-tester.art


      - name: Run unit tests (mini)
        if: matrix.version == 'mini'
        shell: msys2 {0}
        run: |
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          ./bin/arturo tools/tester.art


      # curl -L https://arturo-lang.s3.amazonaws.com/libcrypto-1_1-x64.dll -o libcrypto-1_1-x64.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/libssl-1_1-x64.dll -o libssl-1_1-x64.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/pcre64.dll -o pcre64.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/sqlite3_64.dll -o sqlite3_64.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/libgmp-10.dll -o libgmp-10.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/libmpfr-4.dll -o limpfr-4.dll
      - name: Create artifact (full)
        if: matrix.version == 'full'
        run: |
          mkdir arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}

          curl -L https://arturo-lang.s3.amazonaws.com/libwinpthread-1.dll -o libwinpthread-1.dll
          curl -L https://arturo-lang.s3.amazonaws.com/libgmp-10.dll -o libgmp-10.dll
          curl -L https://arturo-lang.s3.amazonaws.com/libmpfr-6.dll -o libmpfr-6.dll
          curl -L https://arturo-lang.s3.amazonaws.com/sqlite3_64.dll -o sqlite3_64.dll
          curl -L https://arturo-lang.s3.amazonaws.com/libgcc_s_seh-1.dll -o libgcc_s_seh-1.dll
          curl -L https://arturo-lang.s3.amazonaws.com/pcre64.dll -o pcre64.dll
          curl -L https://curl.se/ca/cacert.pem -o cacert.pem

          cp *.dll arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          cp *.pem arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          cp src/extras/webview/deps/dlls/x64/webview.dll arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          cp src/extras/webview/deps/dlls/x64/WebView2Loader.dll arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}

          cp bin/arturo.exe arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}

      # curl -L https://arturo-lang.s3.amazonaws.com/libcrypto-1_1-x64.dll -o libcrypto-1_1-x64.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/libssl-1_1-x64.dll -o libssl-1_1-x64.dll
      # curl -L https://arturo-lang.s3.amazonaws.com/pcre64.dll -o pcre64.dll
      - name: Create artifact (mini)
        if: matrix.version == 'mini'
        run: |
          mkdir arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          
          curl -L https://arturo-lang.s3.amazonaws.com/libwinpthread-1.dll -o libwinpthread-1.dll
          curl -L https://arturo-lang.s3.amazonaws.com/pcre64.dll -o pcre64.dll
          curl -L https://curl.se/ca/cacert.pem -o cacert.pem

          cp *.dll arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
          cp *.pem arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}

          cp bin/arturo.exe arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}

      - name: Upload Artifacts
        uses: 'actions/upload-artifact@v1'
        with:
          name: arturo-${{matrix.version}}-${{matrix.arch}}-windows
          path: arturo-${{matrix.version}}-${{matrix.arch}}-${{matrix.os}}
