#!/usr/bin/env -S nim e --hints:off
######################################################
# Arturo
# Programming Language + Bytecode VM compiler
# (c) 2019-2022 Yanis Zafirópulos
#
# @file: install.nims
######################################################

mode = ScriptMode.Silent

#=======================================
# Libraries
#=======================================

import os, parseopt, sequtils
import strformat, strutils, tables

#=======================================
# Constants
#=======================================

let
    # terminal colors
    COLORS      = hostOS != "windows"

    RED*        = if COLORS: "\e[0;31m" else: ""
    GREEN*      = if COLORS: "\e[1;32m" else: ""
    BLUE*       = if COLORS: "\e[0;34m" else: ""
    MAGENTA*    = if COLORS: "\e[1;35m" else: ""
    CYAN*       = if COLORS: "\e[1;36m" else: ""
    GRAY*       = if COLORS: "\e[0;90m" else: ""
    CLEAR*      = if COLORS: "\e[0m"    else: ""
    BOLD*       = if COLORS: "\e[1m"    else: ""

    # paths
    ROOT_DIR    = r"."
    TARGET_DIR  = "{ROOT_DIR}/bin".fmt
    TARGET_FILE = toExe("{TARGET_DIR}/arturo".fmt)
    TARGET_LIB  = "{ROOT_DIR}/lib".fmt
    MAIN        = "src/arturo.nim"

    # configuration options
    OPTIONS = {
        "arm"               : "--cpu:arm",
        "arm64"             : "--cpu:arm64 --gcc.path:/usr/bin --gcc.exe:aarch64-linux-gnu-gcc --gcc.linkerexe:aarch64-linux-gnu-gcc",
        "debug"             : "-d:DEBUG --debugger:on --debuginfo --linedir:on",
        "mini"              : "",
        "noasciidecode"     : "-d:NOASCIIDECODE",
        "noexamples"        : "-d:NOEXAMPLES",
        "nogmp"             : "-d:NOGMP",
        "noparsers"         : "-d:NOPARSERS",
        "nosqlite"          : "-d:NOSQLITE",
        "nounzip"           : "-d:NOUNZIP",
        "nowebview"         : "-d:NOWEBVIEW",
        "profile"           : "-d:PROFILE --profiler:on --stackTrace:on",
        "release"           : "--passC:'-flto'",
        "safe"              : "-d:SAFE",
        "verbose"           : "-d:VERBOSE",
        "web"               : "--verbosity:3 -d:WEB"
    }.toTable

#=======================================
# Variables
#=======================================

var
    BINARY = "bin/arturo"
    COMPILER = "c"
    MINI_BUILD = false
    COMPRESS = true
    PRINT_LOG = false
    RUN_UNIT_TESTS = false
    FOR_WEB = false
    IS_DEV_BUILD = false     
    MODE = ""       
    ARGS: seq[string] = @[] 

    FLAGS* = "--skipParentCfg:on --colors:off -d:release -d:danger --panics:off --mm:orc --checks:off --overflowChecks:on -d:ssl --passC:-O3 --cincludes:extras --nimcache:.cache --embedsrc:on --path:src"
    CONFIG=""

#=======================================
# Helpers
#=======================================

proc getOSInfo*(): string =
    case hostOS:
        of "windows":       result = "Windows"
        of "macosx":        result = "macOS"
        of "linux":         result = "Linux"
        of "netbsd":        result = "NetBSD"
        of "freebsd":       result = "FreeBSD"
        of "openbsd":       result = "OpenBSD"
        of "solaris":       result = "Solaris"
        of "aix":           result = "AIX"
        of "haiku":         result = "Haiku"
        of "standalone":    result = "Unknown"

proc getNimInfo*(): string =
    NimVersion

proc miniBuild*() =
    for k in ["noasciidecode", "noexamples", "nogmp", "noparsers", "nosqlite", "nounzip", "nowebview"]:
        FLAGS = "{FLAGS} {OPTIONS[k]}".fmt
    FLAGS = "{FLAGS} -d:MINI".fmt

proc compressBinary() =
    echo r"{GRAY}Compressing binary:{CLEAR}".fmt
    if FOR_WEB:
        try:
            exec r"uglifyjs {BINARY} -c -m ""toplevel,reserved=['A$']"" -c -o {BINARY}/.js/.min.js".fmt
        except:
            echo "uglifyjs not available"
    else:
        try:
            exec r"upx.exe -q {toExe(BINARY)}".fmt
        except:
            echo "upx not available"

proc setupDirectories*() =
    # create target dirs recursively, if not exists
    mkdir TARGET_DIR
    mkdir TARGET_LIB

#=======================================
# Output
#=======================================

proc showLogo*() =
    echo r"====================================================================={GREEN}".fmt
    echo r"                               _                                     "
    echo r"                              | |                                    "
    echo r"                     __ _ _ __| |_ _   _ _ __ ___                    "
    echo r"                    / _` | '__| __| | | | '__/ _ \                   "
    echo r"                   | (_| | |  | |_| |_| | | | (_) |                  "
    echo r"                    \__,_|_|   \__|\__,_|_|  \___/                   "
    echo r"{CLEAR}{BOLD}                                                        ".fmt
    echo r"                     Arturo Programming Language{CLEAR}              ".fmt
    echo r"                      (c)2022 Yanis Zafirópulos                      "
    echo r"                                                                     "

proc showHeader*(title: string) = 
    echo r"====================================================================="
    echo r" ► {title}                                                           ".fmt
    echo r"====================================================================="

proc section*(title: string) =
    echo ""
    echo r"--------------------------------------------"
    echo " {MAGENTA}●{CLEAR} {title}".fmt
    echo r"--------------------------------------------"

proc showFooter*() =
    echo r"{GRAY}".fmt
    echo r"====================================================================="
    echo r": Arturo has been successfully built & installed!"
    echo r":"
    echo r": To be able to run it,"
    echo r": first make sure its in your $PATH:"
    echo r":"
    echo r":        export PATH=$HOME/.arturo/bin:$PATH"
    echo r":"
    echo r": and add it to your ${shellRcFile},"
    echo r": so that it's set automatically every time."
    echo r":"
    echo r": Rock on! :)"
    echo r"====================================================================="
    echo r"{CLEAR}".fmt

proc showEnvironment*() =
    section "Checking environment..."

    echo "{GRAY}   os: {getOSInfo()}".fmt
    echo "   compiler: Nim {getNimInfo()}{CLEAR}".fmt

proc showBuildInfo*() =
    section "Building..."

    echo "{GRAY}   version: ".fmt & staticRead("version/version") & " " & staticRead("version/build")
    echo "   config: @full".fmt

#=======================================
# Methods
#=======================================

proc doInstall*() =
    showHeader "install"

    # check environment
    let userName = if getOSinfo() == "Windows": getEnv("USERNAME") else: staticExec("whoami")
    
    # if the one who's building is some guy going back the nick "drkameleon" -
    # who might that be ?! - then it's a DEV build
    if userName == "drkameleon":
        writeFile("version/build", $(readFile("version/build").strip.parseInt + 1))
        exec r"git commit -m 'build update' version/build".fmt
        FLAGS = r"{FLAGS} -d:DEV --listCmd --verbosity:0 --hints:on".fmt

    # show environment & build info
    showEnvironment()
    showBuildInfo()

    # let's go for it
    exec "nim {COMPILER} {FLAGS} -o:{toExe(BINARY)} {MAIN}".fmt

proc doPackage*() =
    showHeader "package"

proc doTest*() =
    showHeader "test"
    exec r"{TARGET_FILE} ./tools/tester.art".fmt

proc doBenchmar*() = 
    showHeader "benchmark"
    echo "something"

proc showHelp*(error=false) =
    if error:
        showHeader("Error")
        echo r"{RED}".fmt
        echo r" Not a valid operation."
        echo r" Please choose one of the ones below:"
        echo r"{CLEAR}".fmt
    else:
        showHeader("Help")

    echo r" install              : Build arturo and install executable"
    echo r"      mini            : Build MINI version (optional)"
    echo r"      web             : Build Web/JS version (optional)"
    echo r""
    echo r" package <script>     : Package arturo app and build executable"
    echo r""
    echo r" test                 : Run test suite"
    echo r" benchmark            : Run benchmark suite"
    echo r""
    echo r" help                 : Show this help screen"
    echo r""

#=======================================
# Main
#=======================================

# parse command line
var p = initOptParser("") 
while true:
    p.next()

    case p.kind:
        of cmdArgument:
            if p.key in ["install", "package", "test", "benchmark", "help"]:
                MODE = p.key
            else:
                if p.key notin ["e", "./build", "build"]:
                    if OPTIONS.hasKey(p.key):
                        FLAGS = "{FLAGS} {OPTIONS[p.key]}".fmt
                        case p.key:
                            of "debug":
                                COMPRESS = false
                            of "mini":
                                miniBuild()
                            of "web":
                                miniBuild()
                                FOR_WEB = true
                                COMPILER = "js"
                                BINARY = r"{BINARY}.js".fmt
                            else:
                                discard
                    else:
                        ARGS.add(p.key)
        of cmdShortOption, cmdLongOption:   
            discard
        of cmdEnd: 
            break

# show our log anyway
showLogo()

# process accordingly
case MODE:
    of "install":
        doInstall()
    of "package":
        doPackage()
    of "test":
        doTest()
    of "help":
        showHelp()
    else:
        showHelp(error=true)

echo "ARGS: " & $(ARGS)
echo "FLAGS: " & $(FLAGS)
showFooter()

# ################################################################################
# # FUNCTIONS
# ################################################################################
# proc verifyDirectories() =
#     # create target dirs recursively, if not exists
#     mkdir TARGET_DIR
#     mkdir TARGET_LIB

# proc installAll() =
#     cpFile(r"{toExe(BINARY)}".fmt, r"{TARGET_FILE}".fmt)
#     echo "{GRAY}Deploy files to: {ROOT_DIR}{CLEAR}".fmt
    
# proc buildArturo() =
#     echo(r"{GRAY}Build version: ".fmt, staticExec(r"cat version/version"), r" ", staticExec(r"cat version/build".fmt))
#     echo r"config: {CONFIG}".fmt
#     echo r"FLAGS: {FLAGS}".fmt
#     echo r""

#     if not PRINT_LOG and not IS_DEV_BUILD:
#         exec "nim {COMPILER} {FLAGS} -o:{toExe(BINARY)} {MAIN}".fmt
#     else:
#         exec "nim {COMPILER} {FLAGS} -o:{toExe(BINARY)} {MAIN}".fmt
#     echo "{CLEAR}".fmt

# proc buildPackage(package: string) =
#     # generate portable data
#     writeFile("{package}.data.json".fmt, staticExec(r"arturo --package-info {package}.art".fmt))

#     # set environment variables
#     putEnv("PORTABLE_INPUT", "{package}.art".fmt)
#     putEnv("PORTABLE_DATA", "{package}.data.json".fmt)
        
#     BINARY="{package}".fmt
#     FLAGS="{FLAGS} --forceBuild:on --opt:size -d:NOEXAMPLES -d:NOERRORLINES -d:PORTABLE".fmt
#     echo r"{GRAY}FLAGS: {FLAGS}".fmt
#     echo r""

#     exec(r"nim c {FLAGS} -o:{toExe(BINARY)} {MAIN}".fmt)
        
#     # clean up
#     rmFile(r"{package}.data.json".fmt)
#     #animate_progress 
#     echo "{CLEAR}".fmt

# ################################################################################
# # Check command switches
# ################################################################################
# let userName = if getOSinfo() == "Windows": getEnv("USERNAME") else: staticExec("whoami")
# IS_DEV_BUILD = if userName == "drkameleon": true else: false

# let yes = @["", "on", "1", "x", "yes", "true"]
# var 
#     p = initOptParser("") 
#     package: string
# while true:
#     p.next()
#     case p.kind
#     of cmdEnd: break
#     of cmdShortOption, cmdLongOption:            
#         if p.key in ["log"]:
#             PRINT_LOG = true
#         if p.key in ["noupx"]:
#             COMPRESS = false
#         if p.key in ["dev"]:
#             IS_DEV_BUILD = true
#         if p.key in ["test"]:
#             RUN_UNIT_TESTS = true
#         if p.key in ["release"]:
#             FLAGS = r"{FLAGS} --passC:'-flto'".fmt
#         if p.key in ["mini"]:            
#             miniBuild()
#         if p.key in ["safe"]:
#             FLAGS = r"{FLAGS} -d:SAFE".fmt
#         if p.key in ["web"]:
#             miniBuild()
#             FOR_WEB = true
#             COMPILER = "js"
#             BINARY = r"{BINARY}.js".fmt
#             FLAGS = r"{FLAGS} --verbosity:3".fmt
#             FLAGS = r"{FLAGS} -d:WEB ".fmt

#         if p.key in ["noasciidecode"]: FLAGS = r"{FLAGS} -d:NOASCIIDECODE".fmt
#         if p.key in ["noexamples"]: FLAGS = r"{FLAGS} -d:NOEXAMPLES".fmt
#         if p.key in ["nogmp"]: FLAGS = r"{FLAGS} -d:NOGMP".fmt
#         if p.key in ["noparsers"]: FLAGS = r"{FLAGS} -d:NOPARSERS".fmt
#         if p.key in ["nosqlite"]: FLAGS = r"{FLAGS} -d:NOSQLITE".fmt
#         if p.key in ["nounzip"]: FLAGS = r"{FLAGS} -d:NOUNZIP".fmt
#         if p.key in ["nowebview"]: FLAGS = r"{FLAGS} -d:NOWEBVIEW".fmt
        
#         if p.key in ["arm"]: FLAGS = r"{FLAGS} --cpu:arm".fmt
#         if p.key in ["arm64"]:
#             FLAGS = r"{FLAGS} --cpu:arm64 --gcc.path:/usr/bin".fmt
#             FLAGS = r"{FLAGS} --gcc.exe:aarch64-linux-gnu-gcc --gcc.linkerexe:aarch64-linux-gnu-gcc".fmt
#         if p.key in ["verbose"]:
#             CONFIG = r"verbose {CONFIG}".fmt
#             FLAGS = r"{FLAGS} -d:VERBOSE".fmt
#         if p.key in ["benchmark"]:
#             CONFIG = r"benchmark {CONFIG}".fmt
#             FLAGS = r"{FLAGS} -d:BENCHMARK".fmt
#         if p.key in ["debug"]:
#             COMPRESS = false
#             CONFIG = r"debug {CONFIG}".fmt
#             FLAGS = r"{FLAGS} -d:DEBUG --debugger:on --debuginfo --linedir:on".fmt
#         if p.key in ["profile"]:
#             CONFIG = r"profile {CONFIG}".fmt
#             FLAGS = r"{FLAGS} -d:PROFILE --profiler:on --stackTrace:on".fmt
#     of cmdArgument: package = p.key #discard

# if MINI_BUILD:
#     CONFIG = r"@mini {CONFIG}".fmt
#     FLAGS = r"{FLAGS} --opt:size".fmt
# else: 
#     CONFIG = r"@full {CONFIG}".fmt
#     FLAGS = "{FLAGS} --opt:speed".fmt 

# if IS_DEV_BUILD:
#     writeFile("version/build", $(readFile("version/build").strip.parseInt + 1))
#     exec r"git commit -m 'build update' version/build".fmt
#     FLAGS = r"{FLAGS} -d:DEV --listCmd --verbosity:0 --hints:on".fmt

# #=======================================
# # Main tasks
# #=======================================

# task build, "building":
#     echo "building now"

# task install, "installing":
#     echo "installing now"

# task test, "Run test suite":
#     exec r"{TARGET_FILE} ./tools/tester.art".fmt

# task verify, "Show nim version":
#     section "Checking environment..."
#     let currentOS = getOSinfo()
#     if currentOS == "Windows":
#         FLAGS.add(" -d:NOGMP")
#     echo getNimInfo()
    
# task install, "Copy executable to {TARGET_DIR}".fmt:
#     section "Installing..."
#     verifyDirectories()
#     installAll()

# task build, "Build arturo and install executable":
#     showHeader "Installer"
#     verifyTask()

#     try:
#         section "Building..."
#         buildArturo()

#         if COMPRESS: 
#             section "Post-processing..."
#             compressBinary()

#         installTask()
        
#         if RUN_UNIT_TESTS:
#             testTask()

#         section "Done!"
#         showFooter()

#     except:
#         echo "The installer failed :("

#     quit(QuitSuccess)

# task package, "Package arturo app and build executable":
#     showHeader "Packager"
#     verifyTask()

#     try:
#         section "Packaging..."
#         buildPackage(package)

#         if COMPRESS: 
#             section "Post-processing..."
#             compressBinary()

#         section "Done!"

#     except:
#         echo "The packager failed :("

#     quit(QuitSuccess)

