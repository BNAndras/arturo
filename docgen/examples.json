{"FactorsOfAnInteger":"factors: @(num){\n\tfilter 1..36 -> num%&=0 \n}\n\nprint [factors 36]","ReverseAString":"str: \"Hello World\"\n\nprint [reverse str]","ExtendYourLanguage":"if2: @(cond1 cond2 both one two none){\n\tif [and cond1 cond2] {\n\t\tboth ~\n\t} {\n\t\tif cond1 { one ~ } {\n\t\t\tif cond2 { two ~ } {\n\t\t\t\tnone ~\n\t\t\t}\n\t\t}\n\t}\n}\n\nif2 true false { \n\tprint \"both\" \n} { \n\tprint \"only first\" \n} { \n\tprint \"only second\" \n} { \n\tprint \"none\" \n}","FunctionDefinition.1":"multiply: {\n\t&0 * &1\n}\n\nprint [multiply 3 7]","Sha1":"print [sha1 \"The quick brown fox jumped over the lazy dog's back\"]","ArrayConcatenation":"arr1: #(1 2 3)\narr2: #(\"four\" \"five\" \"six\")\n\nprint arr1 + arr2","FizzBuzz":"loop 1..100 {\n\tif &%15=0 { print \"FizzBuzz\" } {\n\t\tif &%3=0 { print \"Fizz\" } {\n\t\t\tif &%5=0 { print \"Buzz\" } {\n\t\t\t\tprint &\n\t\t\t}\n\t\t}\n\t}\n}","Documentation":":doc #{\n\tproject:\t\t~Arturo\n\n\tauthor: \t\t\"Dr.Kameleon\"\n\temail:\t\t\t\"drkameleon@gmail.com\"\n\tlicense:\t\t\"MIT\"\n\n\tfile: \t\t\t\"Documentation.art\"\n}\n\nsomeFunc: {\n\t:doc #{ description: \"takes two numbers and adds them up\" }\n\n\treturn &0+&1\n}","CommandLineArguments.2":"args: &\n\nloop args @(arg){\n\tprint arg\n}","IncrementANumericalString":"num: \"12349\"\n\nprint \"The next number is: \" + ([toNumber num]+1)","PrimalityByTrialDivision":"prime: @(n){\n    if n=2 -> return true\n    if n=3 -> return true\n    if [or n<=1 n%2=0] -> return false\n    \n    upper: [toNumber [sqrt [toReal n]]]\n    loop [rangeBy 3 upper 2] {\n        if n%&=0 -> return false\n    }\n    return true\n}\n\nloop 1..20 {\n    print \"isPrime(\" + & + \")? = \" + [prime &]\n}","ExecuteASystemCommand":"print [shell \"ls\"]","Loops.NPlusOneHalf.Functional":"print [join [map 1..10 => toString] \", \"]","ReverseTheGenderOfAString":"reverseGender: @(str){\n\tret \t\t:\tstr\n\tentries \t:\t#(\"She\" \"she\" \"Her\" \"her\" \"hers\" \"He\" \"he\" \"His\" \"his\" \"him\")\n\trepls\t\t:\t#(\"He_\" \"he_\" \"His_\" \"his_\" \"his_\" \"She_\" \"she_\" \"Her_\" \"her_\" \"her_\")\n\n\tloop [range 0 [size entries]-1] @(i){\n\t\tret: replace ret \"/\\b\"+entries.[i]+\"\\b/\" repls.[i]\n\t}\n\n\treturn [replace ret \"_\" \"\"]\n}\n\nprint [reverseGender \"She was a soul stripper. She took his heart!\"]\nprint [reverseGender \"He was a soul stripper. He took her heart!\"]\nprint [reverseGender \"She wants what's hers, he wants her and she wants him!\"]\nprint [reverseGender \"Her dog belongs to him but his dog is hers!\"]\n\n ","Literals.String.String":"str: \"Hello World\"\n","HelloWorld":"print \"Hello world!\"","ReadEntireFile":"contents: read \"input.txt\"\n","Averages.ArithmeticMean":"arr: #(1 2 3 4 5 6 7)\n\nprint [avg arr]","ExecuteBrainf*ck":"/*********************************\n * Brainf*ck compiler\n * In Art:uro\n *********************************/\n\nTape                : #(0)\nDataPointer         : 0\nInstructionPointer  : 0\n\n// Look for jumps in Code an register them\n// in the Jumps table\n\nprecomputeJumps: {\n    stack           : #()\n    jumphash        : #{}\n    instrPointer    : 0\n\n    loop instrPointer<CodeLength {\n        command: [chars Code].[instrPointer]\n        if command=\"[\" { stack: stack+instrPointer } {\n            if command=\"]\" {\n                target: last stack\n                deleteBy stack [size stack]-1\n                jumphash.[toString target]: instrPointer\n                jumphash.[toString instrPointer]: target\n            }\n        }\n        instrPointer: instrPointer+1\n    }\n    jumphash\n}\n\n// Check if current state is valid\n\nStateIsValid: {\n    all #(0<=DataPointer DataPointer<[size Tape] 0<=InstructionPointer InstructionPointer<CodeLength)\n}\n\n// Compile the program\n\ninterpret: {\n    loop [StateIsValid ~] {\n        command: [chars Code].[InstructionPointer]\n        if command=\"+\" { Tape.[DataPointer]: Tape.[DataPointer]+1 }\n        if command=\"-\" { Tape.[DataPointer]: Tape.[DataPointer]-1 }\n        if command=\">\" { DataPointer: DataPointer+1, if DataPointer=[size Tape] { Tape: Tape+0 } }\n        if command=\"<\" { DataPointer: DataPointer-1 }\n        if command=\".\" { prints [char Tape.[DataPointer]] }\n        if command=\",\" {\n            inp: toNumber|input ~\n            if inp=13 { inp: 10 }\n            if inp=3  { panic \"something went wrong!\" }\n            Tape.DataPointer: inp\n        }\n        if command=\"[\" {\n            if Tape.[DataPointer]=0 { InstructionPointer: Jumps.[toString InstructionPointer] }\n        }\n        if command=\"]\" {\n            if Tape.[DataPointer]!=0 { InstructionPointer: Jumps.[toString InstructionPointer] }\n        }\n\n        InstructionPointer: InstructionPointer+1\n    }\n}\n\nif [size &]<1 { panic \"Not enough arguments - Usage: bfc <script>\" }\n\nCode            : read &0\nCodeLength      : size Code\nJumps           : precomputeJumps ~\n\ninterpret ~\n","AssociativeArray.Creation":"// create a dictionary\ndict: #{\n\tname: \t\t\"john\"\n\tsurname: \t\"doe\"\n\tage: \t\t33\n}\n\nprint dict","GreatestCommonDivisor":"print [gcd #(10 15)]","GuessTheNumber":"n: random 1 10\nprint \"Guess the number: \"\n\nloop [toNumber|strip|input ~] != n {\n\tprint \"Wrong! Guess again: \"\n}\nprint \"Well guessed!\"","SumOfSquares":"arr: 1..10\n\nprint [sum|map arr -> &^2 ]","Loops.Infinite":"loop true {\n\tprint \"SPAM\"\n}","SumDigitsOfAnInteger":"sumDigits: @(n base){\n\tresult: 0\n\tloop n>0 {\n\t\tresult: result + n%base\n\t\tn: n/base\n\t}\n\treturn result\n}\n\nprint [sumDigits 1 10]\nprint [sumDigits 12345 10]\nprint [sumDigits 123045 10]\nprint [sumDigits [toNumber \"0xfe\"] 16]\nprint [sumDigits [toNumber \"0xf0e\"] 16]","FileExtensionIsInExtensionsList":"fileExtensions: #(\"zip\" \"rar\" \"7z\" \"gz\" \"archive\" \"A##\")\n\nhasExtension: @(file){\n\tlowercased: map fileExtensions => lowercase\n\tcontains lowercased [lowercase|replace [pathExtension file] \".\" \"\"]\n}\n\nfiles: #(\"MyData.a##\" \"MyData.tar.Gz\" \"MyData.gzip\" \"MyData.7z.backup\" \"MyData...\" \"MyData\")\n\nloop files {\n\tprint & + \" => hasExtension: \" + [hasExtension &]\n}","Base64DecodeData":"text: \"VG8gZXJyIGlzIGh1bWFuLCBidXQgdG8gcmVhbGx5IGZvdWwgdGhpbmdzIHVwIHlvdSBuZWVkIGEgY29tcHV0ZXIuCiAgICAtLSBQYXVsIFIuIEVocmxpY2g=\"\n\nprint [decodeBase64 text]","Md5":"print [md5 \"The quick brown fox jumped over the lazy dog's back\"]","Literals.Integer":"num: 18966","UrlParser":"url: \"foo://example.com:8042/over/there?name=ferret#nose\"\n\ninspect [urlComponents url]","Iban":"countryIbanSizes: #{\n\tAL: 28, AD: 24, AT: 20, AZ: 28, BE: 16\n    BH: 22, BA: 20, BR: 29, BG: 22, CR: 21, HR: 21, CY: 28\n    CZ: 24, DK: 18, DO: 28, EE: 20, FO: 18, FI: 18, FR: 27\n    GE: 22, DE: 22, GI: 23, GR: 27, GL: 18, GT: 28, HU: 28\n    IS: 26, IE: 22, IL: 23, IT: 27, KZ: 20, KW: 30, LV: 21\n    LB: 28, LI: 21, LT: 20, LU: 20, MK: 19, MT: 31, MR: 27\n    MU: 30, MC: 27, MD: 24, ME: 22, NL: 18, NO: 15, PK: 24\n    PS: 29, PL: 28, PT: 25, RO: 24, SM: 27, SA: 24, RS: 22\n    SK: 24, SI: 19, ES: 24, SE: 24, CH: 21, TN: 24, TR: 26\n    AE: 23, GB: 22, VG: 24 \n}\n\nbase36: [map 0..9 => toString] + [map 97..122 -> uppercase|char & ]\n\nvalidIban: @(iban){\n    iban: replace iban \" \" \"\"\n\n    if [not|contains iban \"/[0-9A-Z]+/\"] -> return false\n    if [size iban]!=countryIbanSizes.[slice iban 0 1] -> return false\n\n    iban: [slice iban 4 [size iban]-1] + [slice iban 0 3]\n    iban: join [map [chars iban] { toString [index base36 &]}] \"\"\n    iban: toNumber iban\n    return iban%97=1\n}\n\nloop #(\"GB82 WEST 1234 5698 7654 32\" \"GB82 TEST 1234 5698 7654 32\") {\n    print & + \" => validation: \" + [validIban &]\n}\n","BitwiseOperations":"a: 255\nb: 2\n\nprint a + \" AND \" + b + \" = \" + [and a b]\nprint a + \" OR \" + b + \" = \" + [or a b]\nprint a + \" XOR \" + b + \" = \" + [xor a b]\nprint \"NOT \" + a + \" = \" + [not a]\nprint a + \" SHL \" + b + \" = \" + [shl a b]\nprint a + \" SHR \" + b + \" = \" + [shr a b]","Loops.ForWithASpecifiedStep":"loop [rangeBy 0 10 2] {\n\tprint &\n}","SumAndProductOfAnArray":"arr: 1..10\n\nprint \"Sum = \" + [sum arr]\nprint \"Product = \" + [product arr]","BooleanValues":"a: true\nb: false\n\nif a { print \"yep\" } { print \"nope\" }\nif b { print \"nope\" } { print \"yep\" }","CommandLineArguments.1":"loop & {\n\tprint &\n}","FunctionDefinition.2":"multiply: @(x y){\n\treturn x*y\n}\n\nprint [multiply 3 7]","Factorial.Recursive":"factorial: @(n){ \n\tif n>0 { \n\t\tn * [factorial n-1]\n\t} { 1 } \n}","ExtractFileExtension":"files: #(\"http://example.com/download.tar.gz\" \"CharacterModel.3DS\" \".desktop\" \"document\" \"document.txt_backup\" \"/etc/pam.d/login\")\n\nloop files {\n\text: if [not|contains [pathExtension &] \"_\"] { pathExtension & } { \"\" }\n\tprint & + \" => extension: \" + ext\n}","TowersOfHanoi":"hanoi: @(n from to via){\n\tif n>0 {\n\t\thanoi n-1 from via to\n\t\tprint \"Move disk \" + n + \" from \" + from + \" to \" + to\n\t\thanoi n-1 via to from\n\t}\n}\n \nhanoi 3 \"L\" \"M\" \"R\"","TruncatablePrimes":"leftTrunc: @(num){\n\tstr: toString num\n\tret: #()\n\tloop [range 0 [size str]-1] @(x){\n\t\tret: ret + [slice str x [size str]]\n\t}\n\treturn [map ret => toNumber]\n}\n\nrightTrunc: @(num){\n\tstr: toString num\n\tret: #()\n\tloop [size str]..1 @(x){\n\t\tret: ret + [slice str 0 x]\n\t}\n\treturn [map ret => toNumber]\n}\n\nisTruncatablePrime: @(nums){ all nums => isPrime }\n\nMaxLeft: 0\nMaxRight: 0\n\nloop [rangeBy 3 1000000 2] @(n){\n\tif [isTruncatablePrime [leftTrunc n]] -> MaxLeft: n\n\tif [isTruncatablePrime [rightTrunc n]] -> MaxRight: n\n}\n\nprint \"Max Left-Truncatable Prime found (<1000000): \" + MaxLeft\nprint \"Max Right-Truncatable Prime found (<1000000): \" + MaxRight\n","Fibonacci.Recursive":"fib: @(x){\n\tif x<2 { 1 }{\n\t\t[fib x-1] + [fib x-2]\n\t} \n}","Permutations":"print [permutations #(1 2 3)]","SumOfASeries":"series: map 1..1000 -> 1.0/&^2\nprint [sum series]","MorseCode":"// set the morse code\n\nletters: #{\n    a: \".-\", b: \"-...\", c: \"-.-.\", d: \"-..\", e: \".\"\n    f: \"..-.\", g: \"--.\", h: \"....\", i: \"..\", j: \".---\"\n    k: \"-.-\", l: \".-..\", m: \"--\", n: \"-.\", o: \"---\"\n    p: \".--.\", q: \"--.-\", r: \".-.\", s: \"...\", t: \"-\"\n    u: \"..-\", v: \"...-\", w: \".--\", x: \"-..-\", y: \"-.--\"\n    z: \"--..\"\n}\nnumbers: #(\"-----\" \".----\" \"..---\" \"...--\" \"....-\" \".....\" \"-....\" \"--...\" \"---..\" \"----.\")\n\n// print an encoded message\n\nstr: \"hello world 2019\"\n\nloop [chars str] {\n    if [not|isWhitespace &] {\n        if [isNumber &] { \n            prints numbers.[toNumber &] \n        } {\n            prints letters.[&]\n        }\n    }\n}\n\nprint \"\"","Factorial.Product":"factorial: @(n){ product|range 1 n }","Arrays":"// empty  array\narrA: #()\n\n// array with initial values\narrB: #(\"one\" \"two\" \"three\")\n\n// adding an element to an existing array\narrB: arrB + \"four\"\nprint arrB\n\n// another way to add an element\nappend! arrB \"five\"\nprint arrB\n\n// retrieve an element at some index\nprint arrB.1","CallAFunction":"printHello: {\n\tprint \"Hello World!\"\n}\n\nsayHello: @(to){\n\tprint \"Hello \" + to + \"!\"\n}\n\nprintAll: @(args){\n\tloop args {\n\t\tprint &\n\t}\n}\n\ngetNumber: { 3 }\n\n// Calling a function that requires no arguments\nprintHello ~\n\n// Calling a function with a fixed number of arguments\nsayHello \"John\"\n\n// Calling a function with a variable number of arguments\nprintAll #(\"one\" \"two\" \"three\")\n\n// Using a function in statement context\nif true -> printHello ~\n\n// Using a function in first-class context within an expression\nif [getNumber ~]=3 -> \"yep, it worked\"\n\n// Obtaining the return value of a function:\nnum: getNumber ~\n\n","CompoundDataType.1":"point: #{\n\tx: 10\n\ty: 20\n}\n\nprint point","CountTheCoins":"changes: @(amount coins){\n\tways: #(0)*(amount+1)\n\tways.0: 1\n\n\tloop coins @(coin){\n\t\tloop coin..amount @(j){\n\t\t\tways.[j]: ways.[j]+ways.[j-coin]\n\t\t}\n\t}\n\treturn ways.[amount]\n}\n\nprint [changes 100 #(1 5 10 25)]\nprint [changes 100000 #(1 5 10 25 50 100)]","PalindromeDetection":"isPalindrome: @(seq){\n\tseq = [reverse seq]\n}\n\nloop #(\"abba\" \"boom\" \"radar\" \"civic\" \"great\") {\n\tprint & + \": isPalindrome? \" + [isPalindrome &]\n}\n","Filter":"arr: #(1 2 3 4 5 6 7 8 9 10)\n\nprint [filter arr => isEven]","StringMatching":"print \"'abcd' starts with 'ab' = \" + [startsWith \"abcd\" \"ab\"]\n\nprint \"'abcd' contains 'bc' = \" + [contains \"abcd\" \"bc\"]\nprint \"'bc' found in 'abcd' at location = \" + [index \"abcd\" \"bc\"]\n\nprint \"'abcd' ends with 'zn' = \" + [endsWith \"abcd\" \"zn\"]","Multifactorial":"multifact: @(n deg){\n\tif n <= deg { n } {\n\t\tn * [multifact n-deg deg]\n\t}\n}\n\nloop 1..5 @(i){\n\tprints \"Degree \" + i + \": \"\n\tloop 1..10 @(j){\n\t\tprints [multifact j i] + \" \"\n\t}\n\tprint \"\"\n}\n","PrimeDecomposition":"loop [filter 2..60 => isPrime] @(num){\n\tn: 2^num-1\n\tprint \"2^\" + num + \"-1 = \" + n + \" => prime decomposition: \" + [primeFactors n]\n}\n","Loops.Foreach":"array: #(\"one\" \"two\" \"three\")\n\ndict: #{\n\tname:\t\t\"john\"\n\tsurname:\t\"doe\"\n\tage:\t\t33\n}\n\nloop array {\n\tprint &\n}\n\nloop dict @(key val){\n\tprint key + \" => \" + val\n}","VariadicFunction":"printAll: @(args){\n\tloop args {\n\t\tprint &\n\t}\n}\n\nprintAll #(\"one\" \"two\" \"three\")","LongestCommonPrefix":"lcp: @(list){\n\tret: \"\"\n    idx: 0\n \n    loop true {\n        thisLetter: \"\"\n        loop list @(word){\n        \tif idx=[size word] -> return ret\n        \tif thisLetter=\"\" -> thisLetter: [chars word].[idx]\n        \tif thisLetter!=[chars word].[idx] -> return ret\n\n        }\n        ret: ret+thisLetter\n        idx: idx+1\n    }\n}\n\nprint [lcp #(\"interspecies\" \"interstellar\" \"interstate\")]\nprint [lcp #(\"throne\" \"throne\")]\nprint [lcp #(\"throne\" \"dungeon\")]\nprint [lcp #(\"throne\" \"\" \"throne\")]\nprint [lcp #(\"cheese\")]\nprint [lcp #(\"\")]\nprint [lcp #(\"prefix\" \"suffix\")]\nprint [lcp #(\"foo\" \"foobar\")]","Arithmetic.Integer":"print \"give me the first number  : \", a: toNumber|strip|input ~\nprint \"give me the second number : \", b: toNumber|strip|input ~\n\nprint a + \" + \" + b + \" = \" + (a+b)\nprint a + \" - \" + b + \" = \" + (a-b)\nprint a + \" * \" + b + \" = \" + (a*b)\nprint a + \" / \" + b + \" = \" + (a/b)\nprint a + \" % \" + b + \" = \" + (a%b)\nprint a + \" ^ \" + b + \" = \" + (a^b)\n","CommaQuibbling":"quibble: @(seq){\n\tif [size seq]=0 { return \"{}\" } {\n\t\tif [size seq]=1 { return \"{\" + seq.0 + \"}\" } {\n\t\t\treturn \"{\" + [join [slice seq 0 [size seq]-2] \", \"] + \" and \" + [last seq] + \"}\"\n\t\t}\n\t}\n}\n\nloop #(#() #(\"ABC\") #(\"ABC\" \"DEF\") #(\"ABC\" \"DEF\" \"G\" \"H\")) {\n\tprint [quibble &]\n}","StringCase":"str: \"alphaBETA\"\n\nprint \"uppercase  : \" + [uppercase str]\nprint \"lowercase  : \" + [lowercase str]\nprint \"capitalize : \" + [capitalize str]","FileInput.Output":"source: [read \"input.txt\"]\nwrite \"output.txt\" source\n\nprint source","Comments":"// This is a simple single-line comment\n\na 10 // another single-line comment\n\n/* Now, this is a\n   multi-line comment\n*/","IntegerComparison":"print \"enter a value for a:\"\na: toNumber|strip|input ~\n\nprint \"enter a value for b:\"\nb: toNumber|strip|input ~\n\nif a<b { print a + \" is less than \" + b }\nif a>b { print a + \" is greater than \" + b }\nif a=b { print a + \" is equal to \" + b }","HelloWorld.NewlineOmission":"prints \"Goodbye, World!\"","Literals.String.Multiline":"multiline: \"This\nis a multi-line\nstring\"","Variables":"num: 10\nstr: \"hello world\"\n\narrA: #(1 2 3)\narrB: #(\"one\" \"two\" \"three\")\narrC: #(1 \"two\" #(3 4 5))\narrD: #(\"one\" true { print \"something\"})\n\ndict: #{\n\tname: \"john\"\n\tsurname: \"doe\"\n\tfunc: {\n\t\tprint \"do sth\"\n\t}\n}","StringLength.CharacterLength":"str: \"Hello World\"\n\nprint \"length = \" + [size str]\t","WriteEntireFile":"contents: \"Hello World!\"\nwrite \"output.txt\" contents","CatalanNumbers":"catalan: @(n){\n\tif n=0 { \n\t\treturn 1 \n\t} {\n\t\treturn ((4*n-2)*[catalan n-1])/(n+1)\n\t}\n}\n\nloop 0..15 {\n\tprint [padRight [toString &] 5] + \"  \" + [padLeft [toString [catalan &]] 20]\n}","Unix.Ls":"print [dirContent \".\"]","DateFormat":"currentDate: now ~\n\nprint [datetime currentDate \"yyyy-MM-dd\"]\nprint [datetime currentDate \"dddd, MMMM dd, yyyy\"]","Collections.Array":"// initialize array\narray: #(\"one\" 2 \"three\" \"four\")\n\n// add an element to the array\narray: array + #(5)\n\nprint array","Loops.IncrementLoopIndexWithinLoopBody":"i: 42\nn: 0\n\nloop n<42 {\n    if [isPrime i] {\n        n: n+1\n        print \"n = \" + [padLeft [toString n] 2] + [padLeft [toString i] 20]\n        i: 2*i-1\n    }\n    i: i+1\n}","DayOfTheWeek":"sundays: filter [range 2008 2121] -> [day|datetime \"25-12-\"+& \"dd-MM-yyyy\"]=\"Sunday\"\n\nprint sundays","HighOrderFunctions":"doSthWith: @(x y func){\n\tfunc x y\n}\n\nprint \"add: \" + [doSthWith 2 3 -> &0 + &1 ]\nprint \"multiply: \" + [doSthWith 2 3 -> &0 * &1 ]","BalancedBrackets":"isBalanced: @(s){\n\tcnt: 0\n\n\tloop [chars s] {\n\t\tif &=\"]\" {\n\t\t\tif [cnt: cnt-1]<0 -> return false\n\t\t} {\n\t\t\tif &=\"[\" -> cnt: cnt+1\n\t\t}\n    }\n\n    return cnt=0\n}\n\nloop 1..9 @(i){\n\tstr: [join [map 0..2*i-1 -> sample #(\"[\" \"]\") ] \"\"]\n\tprints str\n\tif [isBalanced str] { print \" OK\" } { print \" Not OK\" }\n}\n","SumMultiplesOf3Or5":"sumMul35: @(n){ sum|filter [range 1 n-1] -> or &%3=0 &%5=0 }\n\nprint [sumMul35 1000]","FileSize":"file: \"input.txt\"\n\nprint file + \" size: \" + [fileSize file] + \" bytes\"","ArrayLength":"fruit: #(\"apple\" \"orange\")\n\nprint \"array length = \" + [size fruit]","SortingAlgorithms.Quicksort":"quickSort: @(items){\n\tif [size items] < 2 { items } { \n\t\t[quickSort|filter [slice items 1] { & < items.0 }] + items.0 +  [quickSort|filter [slice items 1] { & >= items.0 }]\n\t}\n}\n\nprint [quickSort #(3 1 2 8 5 7 9 4 6)]","Loops.While":"i: 1024\n\nloop i>0 {\n\tprint i\n\ti: i/2\n}","EvenOrOdd":"loop [range 0-5 5] {\n\tif [isEven &] { \n\t\tprint [padLeft [toString &] 4] + \": even\"\n\t} { \n\t\tprint [padLeft [toString &] 4] + \": odd\"\n\t}\n}","TokenizeAString":"str: \"Hello,How,Are,You,Today\"\n\nprint [join [split str \",\"] \".\"]","Literals.FloatingPoint":"pi: 3.14159265","UrlDecoding":"url1: \"http%3A%2F%2Ffoo%20bar%2F\"\nprint [decodeUrl url1]\n\nurl2: \"google.com/search?q=%60Abdu%27l-Bah%C3%A1\"\nprint [decodeUrl url2]","UrlEncoding":"url: \"http://foo bar/\"\n\nprint [encodeUrl url]","CheckThatFileExists":"checkIfExists: @(file){\n    if [fileExists file] { print file + \" exists\" } { print file + \" doesn't exist\" }\n}\n \ncheckIfExists \"input.txt\"\ncheckIfExists \"docs\"\n \ncheckIfExists \"/input.txt\"\ncheckIfExists \"/docs\"","UserInput.Text":"print \"Enter a string: \"\nstr: strip|input ~\n\nprint \"Enter an integer: \"\nnum: toNumber|strip|input ~\n\nprint \"Got: \" + str + \", \" + num","TimeAFunction":"func: {\n\tdelay 2000\n}\n\nprint \"Function took: \" + [benchmark func] + \"s\"","FermatNumbers":"nPowers: #(1 2 4 8 16 32 64 128 256 512)\nfermatSet: map 0..9 -> 2^nPowers.[&]+1\n\nloop 0..9 {\n\tprint \"F(\" + & + \") = \" + fermatSet.[&]\n}\n\nprint \"\"\n\nloop 0..9 {\n\tprint \"prime factors of F(\" + & + \") = \" + [primeFactors fermatSet.[&]]\n}","ApplyACallbackToAnArray":"arr: #(1 2 3 4 5)\n\nprint [map arr -> & * 2 ]","ConditionalStructures.IfThenElse":"num: 2\n\nif num=2 {\n\t\"yep, num is 2\"\n} {\n\t\"something went wrong...\"\n}","Literals.String.Character":"chr: \"Z\"","Collections.Dictionary":"// initialize dictionary\ndict: #{\n\tname: \t\t\"john\"\n\tsurname: \t\"doe\"\n\tage: \t\t33\n\n\tpreferedFood: #(\"fruit\" \"pizza\")\n}\n\n// add an element to the dictionary\ndict: dict + #{ country: \"Spain\" }\n\ninspect dict","LogicalOperations":"logic: @(a b){\n\tprint \"a AND b = \" + [and a b]\n\tprint \"a OR b = \" + [or a b]\n\tprint \"NOT a = \" + [not a]\n}\n\nlogic true false","Loops.For":"loop 0..5 {\n\tloop 0..& {\n\t\tprints \"*\"\n\t}\n\tprint \"\"\n}","UndefinedValues":"undef: null\n\nprint undef","Http":"print [download \"http://google.com\"]","AssociativeArray.Iteration":"// create a dictionary\ndict: #{\n\tname: \t\t\"john\"\n\tsurname: \t\"doe\"\n\tage: \t\t33\n}\n\n// Iterate over key/value pairs\nloop dict {\n\tprint \"key = \" + &0 + \", value = \" + &1\n}\n\nprint \"----\"\n\n// Iterate over keys\nloop [keys dict] {\n\tprint \"key = \" + &\n}\n\nprint \"----\"\n\n// Iterate over values\nloop [values dict] {\n\tprint \"value = \" + &\n}","Factorial.Fold":"factorial: @(n) { \n\tfold 1..n 1 -> &0*&1\n}","HelloWorld.StandardError":"panic \"Goodbye, World!\"","Repeat":"proc: {\n\tprint \"I'm in proc!\"\n}\n\nrepeat: @(func times){\n\tloop times {\n\t\tfunc ~\n\t}\n}\n\nrepeat proc 3","TrigonometricFunctions":"pi: 4*[atan 1.0]\n\nradians: pi/4\ndegrees: 45.0\n\nprint \"sine\"\nprint [sin radians] + \" \" + [sin degrees*pi/180]\n\nprint \"cosine\"\nprint [cos radians] + \" \" + [cos degrees*pi/180]\n\nprint \"tangent\"\nprint [tan radians] + \" \" + [tan degrees*pi/180]\n\nprint \"arcsine\"\nprint [asin|sin radians] + \" \" + [asin|sin radians]*180/pi\n\nprint \"arccosine\"\nprint [acos|cos radians] + \" \" + [acos|cos radians]*180/pi\n\nprint \"arctangent\"\nprint [atan|tan radians] + \" \" + [atan|tan radians]*180/pi\n","GreatestElementOfAList":"arr: #(5 4 2 9 7 3)\n\nprint [max arr]","GenerateLowerCaseAsciiAlphabet":"lcase: map 97..122 => char\n\nprint lcase","Loops.DownwardFor":"loop 10..0 {\n\tprint &\n}","SortingAlgorithms.BubbleSort":"bubbleSort: @(items){\n    changed: true\n\n    loop changed {\n        changed: false\n        i: 0\n        loop [size items]-1 {\n            if items.[i]>items.[i+1] {\n                swap! items i i+1\n                changed: true\n            }\n            i: i+1\n        }\n    }\n    items\n}\n\nprint [bubbleSort #(3 1 2 8 5 7 9 4 6)]","TokenizeAStringWithEscaping":"\ntokenize: @(s sep esc){\n\tescaping: 0\n\tloop [range 0 [size s]-1] @(i){\n\t\tchr: [chars s].[i]\n\n\t\tif escaping=1 {\n\t\t\tprints chr\n\t\t\tescaping: 0\n\t\t} {\n\t\t\tif chr=sep {\n\t\t\t\tprint \"\"\n\n\t\t\t} {\n\t\t\t\tif chr=esc {\n\t\t\t\t\tescaping: 1\n\t\t\t\t} {\n\t\t\t\t\tprints chr\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprint \"\"\n}\n\nstr: \"one^|uno||three^^^^|four^^^|^cuatro|\" \nprint [tokenize str \"|\" \"^\"]\n","StringConcatenation":"str1: \"Hello \"\nstr2: \"World\"\n\nprint str1 + str2 + \"!\"","IntegerRoots":"iRoot: @(b n){\n    if b<2 { return b }\n\n    n1: n-1\n    n2: n\n    n3: n1\n    c: 1\n    d: (n3+b)/n2\n    e: (n3*d + b/d^n1)/n2\n    loop [and c!=d c!=e] {\n        c: d\n        d: e\n        e: (n3*e + b/e^n1)/n2\n    }\n    if d<e { return d }\n    return e\n}\n\nprint \"3rd root of 8 = \" + [iRoot 8 3]\nprint \"3rd root of 9 = \" + [iRoot 9 3]\nprint \"First 2001 digits of the square root of 2 = \" + [iRoot 100^2000*2 2]","Json":"// set some json string\njson: \"{ \\\"foo\\\": 1, \\\"bar\\\": [10, \\\"apples\\\"] }\"\n\n// parsing json string to object\nprint \"JSON:\"\ninspect [parseJson json]\n\n// set some object\nobject: #{\n\tname: \"john\"\n\tsurname: \"doe\"\n\taddress: #{\n\t\tnumber: 10\n\t\tstreet: \"unknown\"\n\t\tcountry: \"Spain\"\n\t}\n\tmarried: false\n}\n\n// generate json string from object\nprint \"OBJECT:\"\nprint [generateJson object]\n"}