{"csv | Collection of functions for JSON parsing/generation":[{"name":"generateCsv","ex":"","req":"(array)","ret":"str","desc":"get CSV string from given array of rows"},{"name":"parseCsv","ex":"","req":"(str) / (str,bool)","ret":"array","desc":"get array of rows by parsing given CSV string, optionally using headers"}],"math | Collection of functions for number-related & math operations":[{"name":"abs","ex":"","req":"(int)","ret":"int","desc":"get absolute value from given value"},{"name":"acos","ex":"","req":"(real)","ret":"real","desc":"get the inverse cosine of given value"},{"name":"acosh","ex":"","req":"(real)","ret":"real","desc":"get the inverse hyperbolic cosine of given value"},{"name":"asin","ex":"","req":"(real)","ret":"real","desc":"get the inverse sine of given value"},{"name":"asinh","ex":"","req":"(real)","ret":"real","desc":"get the inverse hyperbolic sine of given value"},{"name":"atan","ex":"","req":"(real)","ret":"real","desc":"get the inverse tangent of given value"},{"name":"atanh","ex":"","req":"(real)","ret":"real","desc":"get the inverse hyperbolic tangent of given value"},{"name":"avg","ex":"","req":"(array)","ret":"real","desc":"get average value from given array"},{"name":"ceil","ex":"","req":"(real)","ret":"real","desc":"get the smallest number greater than or equal to given value"},{"name":"cos","ex":"","req":"(real)","ret":"real","desc":"get the cosine of given value"},{"name":"cosh","ex":"","req":"(real)","ret":"real","desc":"get the hyperbolic cosine of given value"},{"name":"csec","ex":"","req":"(real)","ret":"real","desc":"get the cosecant of given value"},{"name":"csech","ex":"","req":"(real)","ret":"real","desc":"get the hyperbolic cosecant of given value"},{"name":"ctan","ex":"","req":"(real)","ret":"real","desc":"get the cotangent of given value"},{"name":"ctanh","ex":"","req":"(real)","ret":"real","desc":"get the hyperbolic cotangent of given value"},{"name":"exp","ex":"","req":"(real)","ret":"real","desc":"get the exponential the given value"},{"name":"floor","ex":"","req":"(real)","ret":"real","desc":"get the largest number greater than or equal to given value"},{"name":"gcd","ex":"","req":"(array)","ret":"int","desc":"get the greatest common divisor of the values in given array"},{"name":"inc","ex":"","req":"(int) / (bigInt)","ret":"int,bigInt","desc":"increase given value by 1"},{"name":"inc!","ex":"","req":"(int) / (bigInt)","ret":"int,bigInt","desc":"increase given value by 1 (in-place)"},{"name":"isEven","ex":"","req":"(int) / (bigInt)","ret":"bool","desc":"check if given number is even"},{"name":"isOdd","ex":"","req":"(int) / (bigInt)","ret":"bool","desc":"check if given number is odd"},{"name":"isPrime","ex":"","req":"(int) / (bigInt)","ret":"bool","desc":"check if given number is prime"},{"name":"lcm","ex":"","req":"(array)","ret":"int","desc":"get the least common multiple of the values in given array"},{"name":"ln","ex":"","req":"(real)","ret":"real","desc":"get the natural logarithm of given value"},{"name":"log","ex":"","req":"(real,real)","ret":"real","desc":"get the logarithm of value using given base"},{"name":"log2","ex":"","req":"(real)","ret":"real","desc":"get the binary (base-2) logarithm of given value"},{"name":"log10","ex":"","req":"(real)","ret":"real","desc":"get the common (base-10) logarithm of given value"},{"name":"max","ex":"","req":"(array)","ret":"int","desc":"get maximum of the values in given array"},{"name":"min","ex":"","req":"(array)","ret":"int","desc":"get minimum of the values in given array"},{"name":"pi","ex":"","req":"(null)","ret":"real","desc":"get the circle constant PI"},{"name":"primeFactors","ex":"","req":"(int) / (bigInt)","ret":"array","desc":"get array of prime factors of given number"},{"name":"product","ex":"","req":"(array)","ret":"int,bigInt","desc":"return product of elements of given array"},{"name":"random","ex":"","req":"(int,int)","ret":"int","desc":"generate random number in given range"},{"name":"round","ex":"","req":"(real)","ret":"real","desc":"get given value rounded to the nearest value"},{"name":"sec","ex":"","req":"(real)","ret":"real","desc":"get the secant of given value"},{"name":"sech","ex":"","req":"(real)","ret":"real","desc":"get the hyperbolic secant of given value"},{"name":"shl","ex":"","req":"(int,int) / (bigInt,int)","ret":"int,bigInt","desc":"shift-left number by given amount of bits"},{"name":"shl!","ex":"","req":"(int,int) / (bigInt,int)","ret":"int,bigInt","desc":"shift-left number by given amount of bits (in-place)"},{"name":"shr","ex":"","req":"(int,int) / (bigInt,int)","ret":"int,bigInt","desc":"shift-right number by given amount of bits"},{"name":"shr!","ex":"","req":"(int,int) / (bigInt,int)","ret":"int,bigInt","desc":"shift-right number by given amount of bits (in-place)"},{"name":"sin","ex":"","req":"(real)","ret":"real","desc":"get the sine of given value"},{"name":"sinh","ex":"","req":"(real)","ret":"real","desc":"get the hyperbolic sine of given value"},{"name":"sqrt","ex":"","req":"(real)","ret":"real","desc":"calculate the square root of given value"},{"name":"sum","ex":"","req":"(array)","ret":"int,bigInt","desc":"return sum of elements of given array"},{"name":"tan","ex":"","req":"(real)","ret":"real","desc":"get the tangent of given value"},{"name":"tanh","ex":"","req":"(real)","ret":"real","desc":"get the hyperbolic tangent of given value"}],"url | Collection of functions for URL handling":[{"name":"decodeUrl","ex":"","req":"(str)","ret":"str","desc":"decode given URL"},{"name":"decodeUrl!","ex":"","req":"(str)","ret":"str","desc":"decode given URL (in-place)"},{"name":"encodeUrl","ex":"","req":"(str)","ret":"str","desc":"encode given URL"},{"name":"encodeUrl!","ex":"","req":"(str)","ret":"str","desc":"encode given URL (in-place)"},{"name":"isAbsoluteUrl","ex":"","req":"(str)","ret":"bool","desc":"check if given URL is absolute"},{"name":"urlAnchor","ex":"","req":"(str)","ret":"str","desc":"get anchor component of given URL"},{"name":"urlComponents","ex":"","req":"(str)","ret":"dict","desc":"get all components from given URL"},{"name":"urlHost","ex":"","req":"(str)","ret":"str","desc":"get host component from given URL"},{"name":"urlPassword","ex":"","req":"(str)","ret":"str","desc":"get password component from given URL"},{"name":"urlPath","ex":"","req":"(str)","ret":"str","desc":"get path from given URL"},{"name":"urlPort","ex":"","req":"(str)","ret":"str","desc":"get port component from given URL"},{"name":"urlQuery","ex":"","req":"(str)","ret":"str","desc":"get query part from given URL"},{"name":"urlScheme","ex":"","req":"(str)","ret":"str","desc":"get scheme part from given URL"},{"name":"urlUser","ex":"","req":"(str)","ret":"str","desc":"get username component from given URL"}],"logical | Collection of functions for logical and bitwise operations":[{"name":"and","ex":"","req":"(bool,bool) / (int,int)","ret":"bool,int","desc":"bitwise/logical AND"},{"name":"nand","ex":"","req":"(bool,bool) / (int,int)","ret":"bool,int","desc":"bitwise/logical NAND"},{"name":"nor","ex":"","req":"(bool,bool) / (int,int)","ret":"bool,int","desc":"bitwise/logical NOR"},{"name":"not","ex":"","req":"(bool) / (int)","ret":"bool,int","desc":"bitwise/logical NOT"},{"name":"or","ex":"","req":"(bool,bool) / (int,int)","ret":"bool,int","desc":"bitwise/logical OR"},{"name":"xnor","ex":"","req":"(bool,bool) / (int,int)","ret":"bool,int","desc":"bitwise/logical XNOR"},{"name":"xor","ex":"","req":"(bool,bool) / (int,int)","ret":"bool,int","desc":"bitwise/logical XOR"}],"net | Collection of functions for network-related operations":[{"name":"download","ex":"","req":"(str)","ret":"str","desc":"retrieve string contents from webpage using given URL"}],"convert | Collection of functions for converting between different values":[{"name":"toBin","ex":"","req":"(int)","ret":"str","desc":"convert given number to its binary string representation"},{"name":"toHex","ex":"","req":"(int)","ret":"str","desc":"convert given number to its hexadecimal string representation"},{"name":"toNumber","ex":"","req":"(str) / (real) / (bool)","ret":"int","desc":"convert given string, real or boolean to an integer number"},{"name":"toOct","ex":"","req":"(int)","ret":"str","desc":"convert given number to its octal string representation"},{"name":"toReal","ex":"","req":"(int)","ret":"str","desc":"convert given integer number to real"},{"name":"toString","ex":"","req":"(str) / (int) / (bigInt) / (real) / (array) / (dict) / (func) / (null)","ret":"str","desc":"convert given value to string"}],"path | Collection of functions for File management & path manipulation":[{"name":"absolutePath","ex":"","req":"(str)","ret":"str","desc":"get absolute path from given path"},{"name":"absolutePath!","ex":"","req":"(str)","ret":"str","desc":"get absolute path from given path (in-place)"},{"name":"copyDir","ex":"","req":"(str,str)","ret":"bool","desc":"copy directory at path to given destination"},{"name":"copyFile","ex":"","req":"(str,str)","ret":"bool","desc":"copy file at path to given destination"},{"name":"createDir","ex":"","req":"(str)","ret":"bool","desc":"create directory at given path"},{"name":"currentDir","ex":"","req":"(null) / (str)","ret":"str","desc":"get current directory or set it to given path"},{"name":"deleteDir","ex":"","req":"(str)","ret":"bool","desc":"delete directory at given path"},{"name":"deleteFile","ex":"","req":"(str)","ret":"bool","desc":"delete file at given path"},{"name":"dirContent","ex":"","req":"(str) / (str,str)","ret":"array","desc":"get directory contents from given path; optionally filtering the results"},{"name":"dirContents","ex":"","req":"(str) / (str,str)","ret":"array","desc":"get directory contents from given path, recursively; optionally filtering the results"},{"name":"fileCreationTime","ex":"","req":"(str)","ret":"str","desc":"get creation time of file at given path"},{"name":"fileExists","ex":"","req":"(str)","ret":"bool","desc":"check if file exists at given path"},{"name":"fileLastAccess","ex":"","req":"(str)","ret":"str","desc":"get last access time of file at given path"},{"name":"fileLastModification","ex":"","req":"(str)","ret":"str","desc":"get last modification time of file at given path"},{"name":"fileSize","ex":"","req":"(str)","ret":"int","desc":"get size of file at given path in bytes"},{"name":"dirExists","ex":"","req":"(str)","ret":"bool","desc":"check if directory exists at given path"},{"name":"moveDir","ex":"","req":"(str,str)","ret":"bool","desc":"move directory at path to given destination"},{"name":"moveFile","ex":"","req":"(str,str)","ret":"bool","desc":"move file at path to given destination"},{"name":"normalizePath","ex":"","req":"(str)","ret":"str","desc":"normalize given path"},{"name":"normalizePath!","ex":"","req":"(str)","ret":"str","desc":"normalize given path (in-place)"},{"name":"pathDir","ex":"","req":"(str)","ret":"str","desc":"retrieve directory component from given path"},{"name":"pathExtension","ex":"","req":"(str)","ret":"str","desc":"retrieve extension component from given path"},{"name":"pathFilename","ex":"","req":"(str)","ret":"str","desc":"retrieve filename component from given path"},{"name":"symlinkExists","ex":"","req":"(str)","ret":"bool","desc":"check if symlink exists at given path"}],"time | Collection of functions for Date and Time manipulation":[{"name":"benchmark","ex":"","req":"(func)","ret":"int","desc":"time the execution of a given function in seconds"},{"name":"datetime","ex":"","req":"(str) / (str,str) / (int) / (int,str)","ret":"int,str","desc":"get timestamp from given datetime string (dd-MM-yyyy HH:mm:ss), or string from given timestamp, optionally using a different format"},{"name":"day","ex":"","req":"(int)","ret":"str","desc":"get day of the week for given timestamp"},{"name":"dayOfMonth","ex":"","req":"(int)","ret":"int","desc":"get day of the month for given timestamp"},{"name":"dayOfYear","ex":"","req":"(int)","ret":"int","desc":"get day of the year for given timestamp"},{"name":"delay","ex":"","req":"(int)","ret":"int","desc":"create system delay for given duration in milliseconds"},{"name":"hours","ex":"","req":"(int)","ret":"int","desc":"get hours component from given timestamp"},{"name":"minutes","ex":"","req":"(int)","ret":"int","desc":"get minutes component from given timestamp"},{"name":"month","ex":"","req":"(int)","ret":"str","desc":"get month from given timestamp"},{"name":"now","ex":"","req":"(null)","ret":"int","desc":"get current timestamp"},{"name":"seconds","ex":"","req":"(int)","ret":"int","desc":"get seconds component from given timestamp"}],"string | Collection of functions for String manipulation":[{"name":"capitalize","ex":"","req":"(str)","ret":"str","desc":"capitalize given string"},{"name":"capitalize!","ex":"","req":"(str)","ret":"str","desc":"capitalize given string (in-place)"},{"name":"char","ex":"","req":"(int)","ret":"str","desc":"get ASCII character from given char code"},{"name":"chars","ex":"","req":"(str)","ret":"array","desc":"get string characters as an array"},{"name":"deletePrefix","ex":"","req":"(str,str)","ret":"str","desc":"get string by deleting given prefix"},{"name":"deletePrefix!","ex":"","req":"(str,str)","ret":"str","desc":"get string by deleting given prefix (in-place)"},{"name":"deleteSuffix","ex":"","req":"(str,str)","ret":"str","desc":"get string by deleting given suffix"},{"name":"deleteSuffix!","ex":"","req":"(str,str)","ret":"str","desc":"get string by deleting given suffix (in-place)"},{"name":"distance","ex":"","req":"(str,str)","ret":"int","desc":"get Levenshtein distance between given strings"},{"name":"endsWith","ex":"","req":"(str,str)","ret":"bool","desc":"check if string ends with given string/regex"},{"name":"isAlpha","ex":"","req":"(str)","ret":"bool","desc":"check if all characters in given string are ASCII letters"},{"name":"isAlphaNumeric","ex":"","req":"(str)","ret":"bool","desc":"check if all characters in given string are ASCII letters or digits"},{"name":"isLowercase","ex":"","req":"(str)","ret":"bool","desc":"check if all characters in given string are lowercase"},{"name":"isNumber","ex":"","req":"(str)","ret":"bool","desc":"check if given string is a number"},{"name":"isUppercase","ex":"","req":"(str)","ret":"bool","desc":"check if all characters in given string are uppercase"},{"name":"isWhitespace","ex":"","req":"(str)","ret":"bool","desc":"check if all characters in given string are whitespace"},{"name":"join","ex":"","req":"(array) / (array,str)","ret":"str","desc":"join strings in given array, optionally using separator"},{"name":"lines","ex":"","req":"(str)","ret":"array","desc":"get lines from string as an array"},{"name":"lowercase","ex":"","req":"(str)","ret":"str","desc":"lowercase given string"},{"name":"lowercase!","ex":"","req":"(str)","ret":"str","desc":"lowercase given string (in-place)"},{"name":"matches","ex":"","req":"(str,str)","ret":"array","desc":"get array of matches from string using given string/regex"},{"name":"padCenter","ex":"","req":"(str,int)","ret":"str","desc":"center-justify string by adding given padding"},{"name":"padCenter!","ex":"","req":"(str,int)","ret":"str","desc":"center-justify string by adding given padding (in-place)"},{"name":"padLeft","ex":"","req":"(str,int)","ret":"str","desc":"left-justify string by adding given padding"},{"name":"padLeft!","ex":"","req":"(str,int)","ret":"str","desc":"left-justify string by adding given padding (in-place)"},{"name":"padRight","ex":"","req":"(str,int)","ret":"str","desc":"right-justify string by adding given padding"},{"name":"padRight!","ex":"","req":"(str,int)","ret":"str","desc":"right-justify string by adding given padding (in-place)"},{"name":"replace","ex":"","req":"(str,str,str)","ret":"str","desc":"get string by replacing occurences of string/regex with given replacement"},{"name":"replace!","ex":"","req":"(str,str,str)","ret":"str","desc":"get string by replacing occurences of string/regex with given replacement (in-place)"},{"name":"split","ex":"","req":"(str,str)","ret":"array","desc":"split string to array by given string/regex separator"},{"name":"startsWith","ex":"","req":"(str,str)","ret":"bool","desc":"check if string starts with given string/regex"},{"name":"strip","ex":"","req":"(str)","ret":"str","desc":"remove leading and trailing whitespace from given string"},{"name":"strip!","ex":"","req":"(str)","ret":"str","desc":"remove leading and trailing whitespace from given string (in-place)"},{"name":"uppercase","ex":"","req":"(str)","ret":"str","desc":"uppercase given string"},{"name":"uppercase!","ex":"","req":"(str)","ret":"str","desc":"uppercase given string (in-place)"}],"json | Collection of functions for JSON parsing/generation":[{"name":"generateJson","ex":"","req":"(str) / (int) / (real) / (bool) / (array) / (dict)","ret":"str","desc":"get JSON string from given value"},{"name":"parseJson","ex":"","req":"(str)","ret":"str,int,real,array,dict","desc":"get object by parsing given JSON string"}],"io | Collection of functions for File input/output":[{"name":"read","ex":"","req":"(str)","ret":"str","desc":"read string from file at given path"},{"name":"write","ex":"","req":"(str,str)","ret":"str","desc":"write string to file at given path"}],"terminal | Collection of functions for interacting with the terminal":[{"name":"clear","ex":"","req":"(null)","ret":"null","desc":"clear screen and move cursor to home"},{"name":"input","ex":"","req":"(null)","ret":"str","desc":"read line from stdin"},{"name":"inputChar","ex":"","req":"(null)","ret":"str","desc":"read character from terminal, without being printed"},{"name":"print","ex":"","req":"(str) / (array) / (int) / (bigInt) / (func) / (bool) / (real) / (dict)","ret":"str","desc":"print given value to screen"},{"name":"prints","ex":"","req":"(str) / (array) / (int) / (bigInt) / (func) / (bool) / (real) / (dict)","ret":"str","desc":"print given value to screen without newline"},{"name":"shell","ex":"","req":"(str)","ret":"str","desc":"execute given shell command and get string output"}],"core | Collection of functions for core operations":[{"name":"exec","ex":"","req":"(func,array)","ret":"any","desc":"execute function using given array of values"},{"name":"if","ex":"","req":"(bool,func) / (bool,func,func)","ret":"any","desc":"if condition is true, execute given function; else execute optional alternative function"},{"name":"import","ex":"","req":"(str)","ret":"any","desc":"import module or object in given script path"},{"name":"loop","ex":"","req":"(array,func) / (dict,func) / (bool,func) / (int,func)","ret":"any","desc":"execute given function for each element in collection, or while condition is true"},{"name":"new","ex":"","req":"(dict) / (array) / (str)","ret":"any","desc":"get new copy of given object"},{"name":"panic","ex":"","req":"(str)","ret":"str","desc":"exit program printing given error message"},{"name":"return","ex":"","req":"(str) / (array) / (int) / (bigInt) / (func) / (bool) / (real)","ret":"any","desc":"break execution and return given value"},{"name":"syms","ex":"","req":"(null)","ret":"any","desc":"break execution and return given value"}],"reflection | Collection of functions for runtime reflection":[{"name":"inspect","ex":"","req":"(str) / (array) / (int) / (bigInt) / (func) / (bool) / (real) / (dict)","ret":"str","desc":"print given value to screen in a readable format"},{"name":"type","ex":"","req":"(str) / (array) / (int) / (bigInt) / (func) / (bool) / (real) / (dict)","ret":"str","desc":"get type of given object as a string"}],"array | Collection of functions for Array/List manipulation":[{"name":"all","ex":"if [all #(true 2>1)] { print \"yep\" }\n#= yep\n","req":"(array) / (array,func)","ret":"bool","desc":"check if all elements of array are true or pass the condition of given function"},{"name":"any","ex":"","req":"(array) / (array,func)","ret":"bool","desc":"check if any elements of array are true or pass the condition of given function"},{"name":"count","ex":"","req":"(array,func)","ret":"int","desc":"get number of elements from array that pass given condition"},{"name":"filter","ex":"","req":"(array,func)","ret":"array","desc":"get array after filtering each element using given function"},{"name":"filter!","ex":"","req":"(array,func)","ret":"array","desc":"get array after filtering each element using given function (in-place)"},{"name":"first","ex":"","req":"(array)","ret":"any","desc":"get first element of given array"},{"name":"fold","ex":"","req":"(array,int,func) / (array,bigInt,func) / (array,str,func) / (array,array,func) / (array,dict,func)","ret":"int,bigInt,str,array,dict","desc":"fold array using seed value and the given function"},{"name":"last","ex":"","req":"(array)","ret":"any","desc":"get last element of given array"},{"name":"map","ex":"","req":"(array,func)","ret":"array","desc":"get array after executing given function for each element"},{"name":"map!","ex":"","req":"(array,func)","ret":"array","desc":"get array after executing given function for each element (in-place)"},{"name":"permutations","ex":"","req":"(array)","ret":"array","desc":"get all permutations for given array"},{"name":"pop","ex":"","req":"(array)","ret":"any","desc":"get last element of given array (same as 'last')"},{"name":"pop!","ex":"","req":"(array)","ret":"any","desc":"get last element of given array and delete it (in-place)"},{"name":"range","ex":"","req":"(int,int)","ret":"array","desc":"get array from given range (from..to)"},{"name":"rangeBy","ex":"","req":"(int,int,int)","ret":"array","desc":"get array from given range (from..to) with step"},{"name":"rotate","ex":"","req":"(array) / (array,int)","ret":"array","desc":"rotate given array, optionally by using step; negative values for left rotation"},{"name":"rotate!","ex":"","req":"(array) / (array,int)","ret":"array","desc":"rotate given array, optionally by using step; negative values for left rotation (in-place)"},{"name":"sample","ex":"","req":"(array)","ret":"any","desc":"get random sample from given array"},{"name":"shuffle","ex":"","req":"(array)","ret":"array","desc":"shuffle given array"},{"name":"shuffle!","ex":"","req":"(array)","ret":"array","desc":"shuffle given array (in-place)"},{"name":"sort","ex":"","req":"(array)","ret":"array","desc":"sort given array"},{"name":"sort!","ex":"","req":"(array)","ret":"array","desc":"sort given array (in-place)"},{"name":"swap","ex":"","req":"(array,int,int)","ret":"array","desc":"swap array elements at given indices"},{"name":"swap!","ex":"","req":"(array,int,int)","ret":"array","desc":"swap array elements at given indices (in-place)"},{"name":"unique","ex":"","req":"(array)","ret":"array","desc":"remove duplicates from given array"},{"name":"unique!","ex":"","req":"(array)","ret":"array","desc":"remove duplicates from given array (in-place)"},{"name":"zip","ex":"","req":"(array,array)","ret":"array","desc":"get array of element pairs using given arrays"}],"dictionary | Collection of functions for Dictionary/Hash manipulation":[{"name":"hasKey","ex":"","req":"(dict,str)","ret":"bool","desc":"check if dictionary contains key"},{"name":"keys","ex":"","req":"(dict)","ret":"array","desc":"get array of dictionary keys"},{"name":"values","ex":"","req":"(dict)","ret":"array","desc":"get array of dictionary values"}],"crypto | Collection of functions for cryptography":[{"name":"decodeBase64","ex":"","req":"(str)","ret":"str","desc":"Base64-decode given string"},{"name":"decodeBase64!","ex":"","req":"(str)","ret":"str","desc":"Base64-decode given string (in-place)"},{"name":"encodeBase64","ex":"","req":"(str)","ret":"str","desc":"Base64-encode given string"},{"name":"encodeBase64!","ex":"","req":"(str)","ret":"str","desc":"Base64-encode given string (in-place)"},{"name":"md5","ex":"","req":"(str)","ret":"str","desc":"MD5-encrypt given string"},{"name":"md5!","ex":"","req":"(str)","ret":"str","desc":"MD5-encrypt given string (in-place)"},{"name":"sha1","ex":"","req":"(str)","ret":"str","desc":"SHA1-encrypt given string"},{"name":"sha1!","ex":"","req":"(str)","ret":"str","desc":"SHA1-encrypt given string (in-place)"}],"generic | Collection of functions for generic Array/Dictionary/String operations":[{"name":"append","ex":"","req":"(array,str) / (array,int) / (array,bigInt) / (array,bool) / (array,array) / (array,dict) / (array,func) / (str,str)","ret":"array,str","desc":"append element to given array/string"},{"name":"append!","ex":"","req":"(array,str) / (array,int) / (array,bigInt) / (array,bool) / (array,array) / (array,dict) / (array,func) / (str,str)","ret":"array,str","desc":"append element to given array/string (in-place)"},{"name":"contains","ex":"","req":"(array,str) / (array,int) / (array,bigInt) / (array,bool) / (array,array) / (array,dict) / (array,func) / (dict,str) / (dict,int) / (dict,bigInt) / (dict,bool) / (dict,array) / (dict,dict) / (dict,func) / (str,str)","ret":"bool","desc":"check if collection contains given element"},{"name":"delete","ex":"","req":"(array,str) / (array,int) / (array,bigInt) / (array,bool) / (array,array) / (array,dict) / (array,func) / (dict,str) / (dict,int) / (dict,bigInt) / (dict,bool) / (dict,array) / (dict,dict) / (dict,func) / (str,str)","ret":"array,str,dict","desc":"delete value from given array, dictionary or string"},{"name":"delete!","ex":"","req":"(array,str) / (array,int) / (array,bigInt) / (array,bool) / (array,array) / (array,dict) / (array,func) / (dict,str) / (dict,int) / (dict,bigInt) / (dict,bool) / (dict,array) / (dict,dict) / (dict,func) / (str,str)","ret":"array,str,dict","desc":"delete value from given array, dictionary or string (in-place)"},{"name":"deleteBy","ex":"","req":"(array,int) / (dict,str) / (str,int)","ret":"array,str,dict","desc":"delete index from given array, dictionary or string"},{"name":"deleteBy!","ex":"","req":"(array,int) / (dict,str) / (str,int)","ret":"array,str,dict","desc":"delete index from given array, dictionary or string (in-place)"},{"name":"get","ex":"","req":"(array,int) / (dict,str) / (str,int)","ret":"any","desc":"get element from array, dictionary or string using given index/key"},{"name":"index","ex":"","req":"(array,str) / (array,int) / (array,bigInt) / (array,bool) / (array,array) / (array,dict) / (array,func) / (str,str)","ret":"int","desc":"get index of string/element within string/array or -1 if not found"},{"name":"isEmpty","ex":"","req":"(array) / (str) / (dict)","ret":"bool","desc":"check if given array, dictionary or string is empty"},{"name":"reverse","ex":"","req":"(array) / (str)","ret":"array,str","desc":"reverse given array or string"},{"name":"reverse!","ex":"","req":"(array) / (str)","ret":"array,str","desc":"reverse given array or string (in-place)"},{"name":"set","ex":"","req":"(array,int,int) / (array,int,real) / (array,int,bool) / (array,int,array) / (array,int,dict) / (array,int,func) / (array,int,bigInt) / (array,int,str) / (dict,str,int) / (dict,str,real) / (dict,str,bool) / (dict,str,array) / (dict,str,dict) / (dict,str,func) / (dict,str,bigInt) / (dict,str,str) / (str,int,str)","ret":"any","desc":"set element of array, dictionary or string to given value using index/key"},{"name":"set!","ex":"","req":"(array,int,int) / (array,int,real) / (array,int,bool) / (array,int,array) / (array,int,dict) / (array,int,func) / (array,int,bigInt) / (array,int,str) / (dict,str,int) / (dict,str,real) / (dict,str,bool) / (dict,str,array) / (dict,str,dict) / (dict,str,func) / (dict,str,bigInt) / (dict,str,str) / (str,int,str)","ret":"any","desc":"set element of array, dictionary or string to given value using index/key (in-place)"},{"name":"size","ex":"","req":"(array) / (str) / (dict)","ret":"int","desc":"get size of given collection or string"},{"name":"slice","ex":"","req":"(array,int) / (array,int,int) / (str,int) / (str,int,int)","ret":"array,str","desc":"get slice of array/string given a starting and/or end point"}]}