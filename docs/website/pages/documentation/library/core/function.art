name: "function"
type: :function
description: "create function with given arguments and body"
module: "Core"
returns: [
                :function
        ]
alias: "$"
infix?: false
line: 671
source: "https://github.com/arturo-lang/arturo/blob/v0.9.83/src/library/Core.nim#L671"
examples: [
                {
                        f: function [x][ x + 2 ]
                        print f 10                ; 12
                        
                        f: $[x][x+2]
                        print f 10                ; 12
                }
                 {
                        multiply: function [x,y][
                            x * y
                        ]
                        print multiply 3 5        ; 15
                }
                 {
                        ; forcing typed parameters
                        addThem: function [
                            x :integer
                            y :integer :floating
                        ][
                            x + y
                        ]
                }
                 {
                        ; adding complete documentation for user function
                        ; using data comments within the body
                        addThem: function [
                            x :integer :floating
                            y :integer :floating
                        ][
                            ;; description: « takes two numbers and adds them up
                            ;; options: [
                            ;;      mul: :integer « also multiply by given number
                            ;; ]
                            ;; returns: :integer :floating
                            ;; example: {
                            ;;      addThem 10 20
                            ;;      addThem.mult:3 10 20
                            ;; }
                        
                            mult?: attr 'mult
                            switch not? null? mult? 
                                -> return mult? * x + y
                                -> return x + y
                        ]
                        
                        info'addThem
                        
                        ; |--------------------------------------------------------------------------------
                        ; |        addThem  :function                                          0x10EF0E528
                        ; |--------------------------------------------------------------------------------
                        ; |                 takes two numbers and adds them up
                        ; |--------------------------------------------------------------------------------
                        ; |          usage  addThem x :integer :floating
                        ; |                         y :integer :floating
                        ; |
                        ; |        options  .mult :integer -> also multiply by given number
                        ; |
                        ; |        returns  :integer :floating
                        ; |--------------------------------------------------------------------------------
                }
                 {
                        publicF: function .export:['x] [z][
                            print ["z =>" z]
                            x: 5
                        ]
                        
                        publicF 10
                        ; z => 10
                        
                        print x
                        ; 5
                }
                 {
                        ; memoization
                        fib: $[x].memoize[
                            switch x<2 -> 1
                                       -> (fib x-1) + (fib x-2)
                        ]
                        
                        loop 1..25 [x][
                            print ["Fibonacci of" x "=" fib x]
                        ]
                }
        ]
attributes: #[
        import: #[
                types: [
                                :block
                        ]
                description: "import/embed given list of symbols from current environment"
                ]
        export: #[
                types: [
                                :block
                        ]
                description: "export given symbols to parent"
                ]
        memoize: #[
                types: [
                                :logical
                        ]
                description: "store results of function calls"
                ]
        inline: #[
                types: [
                                :logical
                        ]
                description: "execute function without scope"
                ]
        ]
arguments: #[
        arguments: [
                        :literal
                         :block
                ]
        body: [
                        :block
                ]
        ]
related: [
                "Core/method"
                 "Core/module"
                 "Core/until"
                 "Core/new"
        ]