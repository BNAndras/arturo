printMatrix: function [m][
    loop m 'row -> print map row 'val [pad to :string val 6]
    print "--------------------------------"
]

multiply: function [a,b][
    X: size a
    Y: size first b
    result: array.of: @[X Y] 0

    loop 0..X-1 'i [
        loop 0..Y-1 'j [
            loop 0..(size first a)-1 'k ->
                result\[i]\[j]: result\[i]\[j] + a\[i]\[k] * b\[k]\[j]
        ]
    ]
    return result
]

identity: function [n][
    res: new array.of: @[n n] 0
    loop 0..dec n 'z -> res\[z]\[z]: 1
    return res
]

expo: function [M, N][
    if N=0 -> return identity N
    if N=1 -> return M

    n: N
    m: M

    result: identity n
    while [n>0][
        if not? zero? and n 1 ->
            result: multiply result m
        n: shr n 1
        m: multiply m m
    ]
    return result
]

m1: @[@[     3     2 neg 1 ]
      @[ neg 1     0     5 ]
      @[     2 neg 1     3 ]]


printMatrix expo m1 10

C30: (sqrt 3.0) / 2
S30: 1/2

m2: @[@[C30 neg S30]
      @[S30     C30]]

printMatrix expo m2 12