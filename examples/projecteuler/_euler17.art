numberToEnglish: function [n][
    ones: ["zero" "one" "two" "three" "four" "five" "six" "seven" "eight" "nine" "ten" "eleven" "twelve"
           "thirteen" "fourteen" "fifteen" "sixteen" "seventeen" "eighteen" "nineteen"]

    tens: [null null "twenty" "thirty" "forty" "fifty" "sixty" "seventy" "eighty" "ninety"]
    print ["called numberToEnglish with n:" n]
    case [in?]
        when? [0..19 n] [
            return ones \ n
        ]
        when? [20..99 n] [
            if? 0=n%10  [return tens \ n/10]
            else        [return (tens \ n/10) ++ "-" ++ ones \ n%10 ]
        ]
        when? [100..999 n] [
            if? 0=n%100 [return (ones \ n/100) ++ " hundred"]
            else        [
                print ["before calling numberToEnglish, n was:" n]
                initial: (ones \ n/100)
                subnum: numberToEnglish n%100
                print ["after calling numberToEnglish, n is:" n]
                return initial ++ " hundred and " ++ subnum
            ]
        ]
        when? [1000..1000 n] [return "one thousand"]
        else [ 
            ; do nothing
        ]
]

loop 1..1000 'num [print numberToEnglish num]

;print numberToEnglish(352)
; def number_to_english(n: int) -> str:
;     """ Translate an integer into words form

;     :param n: the integer to translate
;     :return: the English phrasing of :math:`n`

;     >>> number_to_english(127)
;     'one hundred and twenty-seven'
;     """

    
;     tens = [None, None, "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"]
;     if 0 <= n < 20:
;         return ones[n]
;     elif 20 <= n <= 90 and n % 10 == 0:
;         return tens[n // 10]
;     elif 20 < n < 100:
;         return tens[n // 10] + "-" + ones[n % 10]
;     elif 100 <= n <= 900 and n % 100 == 0:
;         return ones[n // 100] + " hundred"
;     elif 100 < n < 1000:
;         return ones[n // 100] + " hundred and " + number_to_english(n % 100)
;     elif 1000 < n < 10000:
;         pass
;     elif n == 1000:
;         return "one thousand"
;     else:
;         raise ValueError("unexpected input")