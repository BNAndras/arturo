/*********************************
 * Brainf*ck compiler
 * In Art:uro
 *********************************/

Tape                : #(0)
DataPointer         : 0
InstructionPointer  : 0

// Look for jumps in Code an register them
// in the Jumps table

precomputeJumps: {
    stack           : #()
    jumphash        : #{}
    instrPointer    : 0

    loop instrPointer<CodeLength {
        command: [chars Code].[instrPointer]
        if command="[" { stack: stack+instrPointer } {
            if command="]" {
                target: last stack
                deleteBy stack [size stack]-1
                jumphash.[toString target]: instrPointer
                jumphash.[toString instrPointer]: target
            }
        }
        instrPointer: instrPointer+1
    }
    jumphash
}

// Check if current state is valid

StateIsValid: {
    all #(0<=DataPointer DataPointer<[size Tape] 0<=InstructionPointer InstructionPointer<CodeLength)
}

// Compile the program

interpret: {
    loop [StateIsValid ~] {
        command: [chars Code].[InstructionPointer]
        if command="+" { Tape.[DataPointer]: Tape.[DataPointer]+1 }
        if command="-" { Tape.[DataPointer]: Tape.[DataPointer]-1 }
        if command=">" { DataPointer: DataPointer+1, if DataPointer=[size Tape] { Tape: Tape+0 } }
        if command="<" { DataPointer: DataPointer-1 }
        if command="." { prints [char Tape.[DataPointer]] }
        if command="," {
            inp: toNumber|input ~
            if inp=13 { inp: 10 }
            if inp=3  { panic "something went wrong!" }
            Tape.DataPointer: inp
        }
        if command="[" {
            if Tape.[DataPointer]=0 { InstructionPointer: Jumps.[toString InstructionPointer] }
        }
        if command="]" {
            if Tape.[DataPointer]!=0 { InstructionPointer: Jumps.[toString InstructionPointer] }
        }

        InstructionPointer: InstructionPointer+1
    }
}

if [size &]<1 { panic "Not enough arguments - Usage: bfc <script>" }

Code            : read &0
CodeLength      : size Code
Jumps           : precomputeJumps ~

interpret ~
