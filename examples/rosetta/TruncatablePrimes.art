leftTrunc: @(num){
	str: toString num
	ret: #()
	loop [range 0 [size str]-1] @(x){
		ret: ret + [slice str x [size str]]
	}
	return [map ret => toNumber]
}

rightTrunc: @(num){
	str: toString num
	ret: #()
	loop [size str]..1 @(x){
		ret: ret + [slice str 0 x]
	}
	return [map ret => toNumber]
}

isTruncatablePrime: @(nums)-> all nums => isPrime

MaxLeft: 0
MaxRight: 0

loop [rangeBy 3 1000000 2] @(n){
	if [isTruncatablePrime [leftTrunc n]] -> MaxLeft: n
	if [isTruncatablePrime [rightTrunc n]] -> MaxRight: n
}

print "Max Left-Truncatable Prime found (<1000000): " + MaxLeft
print "Max Right-Truncatable Prime found (<1000000): " + MaxRight
