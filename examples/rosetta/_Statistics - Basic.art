generateStatistics: function [n][
    s:  0.0
    s2: 0.0
    hist: map 1..101 [x][0]

    repeat n [  
        r: random 0 10
        s: s + r
        s2: s2 + r ^ 2
        set hist 10*r (get hist 10*2) + 1
    ]

    mean: s / n
    stddev: sqrt (s2/n) - mean^2

    print ["size:" n]
    print ["mean:" mean]
    print ["stddev:" stddev]

    indx: 0
    loop hist 'x [
        print [0.1*indx join map 1..((70*x) max hist) [z]["="]]
        indx: indx + 1
    ]
]

loop [100 1000 10000] 'n [
    generateStatistics n
]

; def generate_statistics(n)
;   sum = sum2 = 0.0
;   hist = Array.new(10, 0)
;   n.times do
;     r = rand
;     sum += r
;     sum2 += r**2
;     hist[(10*r).to_i] += 1
;   end
;   mean = sum / n
;   stddev = Math::sqrt((sum2 / n) - mean**2)
 
;   puts "size: #{n}"
;   puts "mean:   #{mean}"
;   puts "stddev: #{stddev}"
;   hist.each_with_index {|x,i| puts "%.1f:%s" % [0.1*i, "=" * (70*x/hist.max)]}
;   puts
; end
 
; [100, 1000, 10000].each {|n| generate_statistics n}