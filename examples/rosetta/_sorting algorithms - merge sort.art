; function mergesort(m)
;    var list left, right, result
;    if length(m) ≤ 1
;        return m
;    else
;        var middle = length(m) / 2
;        for each x in m up to middle - 1
;            add x to left
;        for each x in m at and after middle
;            add x to right
;        left = mergesort(left)
;        right = mergesort(right)
;        if last(left) ≤ first(right) 
;           append right to left
;           return left
;        result = merge(left, right)
;        return result

; function merge(left,right)
;    var list result
;    while length(left) > 0 and length(right) > 0
;        if first(left) ≤ first(right)
;            append first(left) to result
;            left = rest(left)
;        else
;            append first(right) to result
;            right = rest(right)
;    if length(left) > 0 
;        append rest(left) to result
;    if length(right) > 0 
;        append rest(right) to result
;    return result

; function mergesort(m)
;    var list left, right, result
;    if length(m) ≤ 1
;        return m
;    else
;        var middle = length(m) / 2
;        for each x in m up to middle - 1
;            add x to left
;        for each x in m at and after middle
;            add x to right
;        left = mergesort(left)
;        right = mergesort(right)
;        if last(left) ≤ first(right) 
;           append right to left
;           return left
;        result = merge(left, right)
;        return result

merge: function [l,r][
    result: new []
    left: new l
    right: new r
    while [and? 0 < size left 
                0 < size right][
        if? (first left) =< first right [
            'result ++ first right
            left: new slice left 1 (size left)-1
        ]
        else [
            'result ++ first right
            right: new slice right 1 (size right)-1
        ]
        if 0 < size left -> 'result ++ left
        if 0 < size right -> 'result ++ right

    ]
    result
]

mergeSort: function [items][
    print ["mergeSort:" items]
    if? 1 >= size items [
        items
    ]
    else [
        left: new []
        right: new []

        middle: (size items)/2
        loop 0..middle-1 'x -> 'left ++ items \ x
        loop middle..(size items)-1 'x -> 'right ++ items \ x

        left: mergeSort left
        right: mergeSort right

        print ["got left:" left "right:" right]

        if? empty? right [left]
        else [
            if? (last left) =< first right [ left ++ right ]
            else [merge left right]
        ]
    ]
]

print mergeSort [3 1 2 8 5 7 9 4 6]