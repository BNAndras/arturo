%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - art
scope: source.arturo
contexts:
  main:
    # Double-quoted string literals
    - match: '"'
      scope: punctuation.definition.string.begin.arturo
      push: double_quoted_string

    # Single-line comments
    - match: '//'
      scope: punctuation.definition.comment.arturo
      push: line_comment

    # Array-Function symbols
    - match: '(\$|#)'
      scope: variable.parameter.arturo

    # Symbols
    - match: '(\+|\-|\*|\/|\%|\&\&|\|\||\<|\>)'
      scope: entity.name.tag.arturo

    # System functions
    - match: '(\b|^\s+)(acos|acosh|all|and|any|asin|asinh|atan|atanh|avg|capitalize|ceil|characters|contains|convert\.markdown|cos|cosh|csv\.parse|date\.now|datetime\.now|day|delete|delete\.by|difference|each|ends\.with|env|even|exec|exp|file\.exists|file\.read|file\.write|filter|first|floor|fold|gcd|get|has\.key|hash|if|import|input|intersection|is\.alpha|is\.alphanumeric|is\.control|is\.digit|is\.directory|is\.empty|is\.file|is\.lowercase|is\.match|is\.symlink|is\.uppercase|is\.whitespace|join|json\.generate|json\.parse|keys|last|lazy|levenshtein|lines|ln|log10|loop|lowercase|map|matches|max|md5|median|memoize|min|month|not|object|odd|or|pad\.center|pad\.left|pad\.right|path\.contents|path\.create|path\.current|path\.directory|path\.extension|path\.filename|path\.normalize|permutations|print|product|random|range|replace|return|reverse|round|sample|set|sha256|sha512|shell|shuffle|sin|sinh|size|sort|spawn|split|sqrt|starts\.with|strip|sum|tail|tan|tanh|time\.now|to\.number|to\.string|trace|type|union|unique|uppercase|uuid|web\.post|web\.read|words|xml\.check|xor|yaml\.generate|yaml\.parse|zip)\b'
      scope: entity.name.tag.arturo

    # Numbers
    - match: '\b(true|false)\b'
      scope: constant.numeric.arturo

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.arturo

    - match: '@([0-9]+)?'
      scope: support.function.arturo

    # Function definitions
    - match: '([a-zA-Z_\.0-9]+)(\s+)?:'
      scope: entity.name.class.arturo

    # User definitions
    #- match: '^(\s+)?([a-zA-Z_]+)\b'
    #  scope: entity.name.class.arturo

  double_quoted_string:
    - meta_scope: string.quoted.double.arturo
    - match: '\\.'
      scope: constant.character.escape.arturo
    - match: '`'
      scope: punctuation.definition.string.interpolated.element.begin.arturo
      push:
      - meta_scope: source.arturo
      - match: '`'
        scope: punctuation.definition.string.interpolated.element.end.arturo
        pop: true
      - include: 'main'
    - match: '"'
      scope: punctuation.definition.string.end.arturo
      pop: true

  line_comment:
    - meta_scope: comment.line.arturo
    - match: $
      pop: true
