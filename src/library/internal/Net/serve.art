; main routes
ROUTES: #[
    GET: #[]
    POST: #[]
    PUT: #[]
    PATCH: #[]
    DELETE: #[]
]

; route helpers
GET:    function [pattern, action]-> ROUTES\GET\[pattern]: var'action
POST:   function [pattern, action]-> ROUTES\POST\[pattern]: var'action
PUT:    function [pattern, action]-> ROUTES\PUT\[pattern]: var'action
PATCH:  function [pattern, action]-> ROUTES\PATCH\[pattern]: var'action
DELETE: function [pattern, action]-> ROUTES\DELETE\[pattern]: var'action

; initial route initialization
initServerInternal: function [serverRoutes][
    do serverRoutes
]

; main request handler
serveInternal: function [Request][
    serverResponse: #[
        serverBody: ""
        serverPattern: ""
        serverStatus: 200
        serverContent: ""
    ]

    send: function [str][
        sendResult: "text/plain"

        if not? null? attr 'css     -> sendResult: "text/css"
        if not? null? attr 'html    -> sendResult: "text/html"
        if not? null? attr 'js      -> sendResult: "application/javascript"
        if not? null? attr 'json    -> sendResult: "application/json"
        if not? null? attr 'xml     -> sendResult: "application/xml"

        serverResponse\serverContent: "Content-Type: " ++ sendResult
        return str
    ]

    callActionFunction: function [actionFunc][
        print "HERE"
        print ["Has params:" keys get info.get 'actionFunc 'args]
        call var'actionFunc []
    ]

    loop keys ROUTES\[Request\method] 'pattern [
        if not? empty? match Request\path "^"++pattern++"$" [
            action: ROUTES\[Request\method]\[pattern]

            serverResponse\serverPattern: pattern
            (block? var'action)? [
                serverResponse\serverBody: do action
            ][
                inspect var'action
                print ["Has params:" keys get info.get 'action 'args]
                serverResponse\serverBody: call var'action []
            ]
            ; serverResponse\serverBody: (block? var'action)? -> do action
            ;                                                 -> callActionFunction var'action
            ; if? block? var'action ->
            ;     serverResponse\serverBody: do action
            ; else ->
            ;     serverResponse\serverBody: call var'action []
            ; else ->
            ;     call action []
            
            return serverResponse
        ]
    ]

    serverResponse\serverStatus: 404
    return serverResponse
]