import {unitt}!

inplaceEquivalence: $[value :any func :literal params :block][
    ;; returns: [reference, inplaced]
    @ [
        call func (@[value]) ++ params
        returnInplaced value func params
    ]
] 

returnInplaced: $[value :any func :literal params :block][
    inplaced: new value
    call func ['inplaced] ++ params
    return inplaced
]

suite "Test :binary operations" [

    binaries: map [0 1] 'x -> to :binary x

    test.prop ":binary ++ :binary results in :binary" [
        loop permutate.repeated new binaries 'entries [
            a: first entries
            b: last entries
            assert -> binary? append a b
        ]
    ]
    
    test.prop ":binary ++ :binary results in :binary" [
        [a b]: new binaries
        
        assert -> binary? append a b
    ]

    test ":binary ++ :binary | 00 ++ 01 = 00 01" [
        [a b]: new binaries
        correct: to :binary [0 1]
        assert -> correct = a ++ b
    ]
    
    test ":binary ++ :integer | 00 ++ 1 = 00 01" [
        a: first new binaries
        b: 1
        correct: to :binary [0 1]
        assert -> correct = a ++ b
    ]

    test ":binary ++ :binary | in-place has the same behavior" [
        [a b]: new binaries

        [ref inp]: inplaceEquivalence (a) 'append @[b]
        assert -> ref = inp
    ]
   
    test ":binary ++ :integer | in-place has the same behavior" [
        [a]: first new binaries
        b: 1

        [ref inp]: inplaceEquivalence (a) 'append @[b]
        assert -> ref = inp
    ]

]