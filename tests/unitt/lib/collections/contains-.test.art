import {unitt}!

suite "contains? for :string types" [

    test ":string may contain :string" [
        assert -> contains? "Arturo" "Art"
        assert -> not? contains? "Arturo" "Ops!"
    ]

    test ":string may contain :char" [
        assert -> contains? "Arturo" 'A'
        assert -> contains? "Arturo" 't'
        assert -> not? contains? "Arturo" 'i'
    ]

    test ":string may contain :literal" [
        assert -> contains? "Arturo" 'Art
        assert -> contains? "Arturo" 't
        assert -> not? contains? "Arturo" 'i
    ]

    test ":string may contain :regex" [
        assert -> contains? "Arturo" {/[Art]/}
        assert -> not? contains? "Arturo" '{/[i]/}
    ]

]

suite "contains? for :range types" [

    test ":range may contain :integer" [
        assert -> contains? 1..10 1
        assert -> contains? 1..10 5
        assert -> contains? 1..10 7
        assert -> contains? 1..10 10
        assert -> not? contains? 1..10 0
    ]

    test ":range may contain :floating" [
        assert -> contains? 1..10 1.0
        assert -> contains? 1..10 5.0
        assert -> contains? 1..10 7.0
        assert -> contains? 1..10 10.0
        assert -> not? contains? 1..10 0.0
    ]

    test ":range is a discrete interval" [
        assert -> not? contains? 1..10 5.5
        assert -> not? contains? (range.step: 2 1 10) 2
    ]

]

suite "contains? for :block types" [

    test ":block may contain :any" [
        sample: @[1 "Example" 'example [] #[]]
        
        assert -> contains? sample 1
        assert -> contains? sample "Example"
        assert -> contains? sample 'example
        assert -> contains? sample []
        assert -> contains? sample #[]
        assert -> not? contains? sample "Hmm"
    ]

    test "contains?.deep can find it into nested :blocks" [
        assert -> contains?.deep [1 2 3 [4 5] 6 7] 3
        assert -> contains?.deep [1 2 3 [4 5] 6 7] 4
        assert -> contains?.deep [1 2 3 [4 5] 6 7] 5
        assert -> contains?.deep [1 2 3 [4 5] 6 7] [4 5]

        assert -> contains? [1 2 3 [4 5] 6 7] [4 5]
        assert -> not? contains? [1 2 3 [4 5] 6 7] 4
        assert -> not? contains? [1 2 3 [4 5] 6 7] 5
    ]
    
    test "contains?.deep can't find :dictionary's values into nested :blocks" [
        assert -> not? contains?.deep @[#[name: "Joe"]] "Joe" 
    ]

]

suite "test .at attribute" [

    test.skip "element at 0 must be equal to first" [

    ]

    test.skip "element at high must be equal to last" [

    ]

    test.skip "element at x must be equal to get x" [

    ]

    test.skip "negative index should verify from backyards" [

    ]

]