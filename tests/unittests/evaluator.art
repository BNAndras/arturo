; Helper functions

spacer: "        "

supersection: function [title][
    cl: #magenta
    print ""
    print color cl repeat "*" 30
    print color cl "* " ++ title
    print color cl repeat "*" 30
]

topic: function [title][
    print ""
    print spacer ++ repeat "*" 30
    print spacer ++ "* " ++ title
    print spacer ++ repeat "*" 30
    print ""
    print spacer ++ repeat "-" 50
]

byteCode: function [blk][
    btc: to :bytecode blk ++ [] ; this little hack is needed to remove newlines from our block
                                ; thus, avoiding all opEol/opEolX bytecode being produced
    inspect btc
    prints spacer
    print ["input:" as.code blk]
    prints spacer
    print ["data:" get btc 'data]
    prints spacer
    print ["code:" get btc 'code]
    print spacer ++ repeat "-" 50
]

; Main unit-tests

;/////////////////////////////////////////////////////////
supersection "SIMPLE VALUES"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Boolean"
    ;*******************************************Ã¥**********************

        byteCode [true]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; constbt
        ; end

        byteCode [false]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; constbf
        ; end

        byteCode [maybe]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: maybe :word

        ; ================================
        ;  CODE
        ; ================================
        ; load0
        ; end

    ;*****************************************************************
    topic "Integer"
    ;*****************************************************************

        byteCode [1]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; consti1
        ; end

        byteCode [10]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; consti10
        ; end

        byteCode [123]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 123 :integer

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

        byteCode [1234567890123]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 1234567890123 :integer

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Floating"
    ;*****************************************************************

        byteCode [0.0]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; constf0
        ; end

        byteCode [1.0]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; constf1
        ; end

        byteCode [10.0]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 10.0 :floating

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

        byteCode [12345.1234567]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 12345.1234567 :floating

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Char"
    ;*****************************************************************

        byteCode [`a`]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :char

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [`ðŸ˜€`]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: ðŸ˜€ :char

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "String"
    ;*****************************************************************

        byteCode [""]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consts
        ; end

        byteCode ["Hello World!"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: Hello World! :string

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Regex"
    ;*****************************************************************

        byteCode [{/hello/}]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: hello :regex

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [{/[A-Z]+\d/}]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [A-Z]+\d :regex

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Type"
    ;*****************************************************************

        byteCode [:integer]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: integer :type

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [:string]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: string :type

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Literal"
    ;*****************************************************************

        byteCode ['a]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :literal

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode ['a 'b 'c]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :literal
        ; 1: b :literal
        ; 2: c :literal

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; push1
        ; push2
        ; end

    ;*****************************************************************
    topic "SymbolLiteral"
    ;*****************************************************************

        byteCode ['+]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: + :symbolliteral

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode ['-->]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: --> :symbolliteral

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Color"
    ;*****************************************************************

        byteCode [#red]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: #FF0000 :color

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [#00FF66]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: #00FF66 :color

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Quantity"
    ;*****************************************************************

        byteCode [1:EUR]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 1:EUR :quantity

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [12:m]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 12:m :quantity

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Block"
    ;*****************************************************************

        byteCode [[]]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consta
        ; end

        byteCode [[1 "hello" 3.14 true]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [ :block
        ;         1 :integer
        ;         hello :string
        ;         3.14 :floating
        ;         true :word
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Null"
    ;*****************************************************************

        byteCode [Ã¸]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; constn
        ; end

        byteCode [null]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: null :word

        ; ================================
        ;  CODE
        ; ================================
        ; load0
        ; end

;/////////////////////////////////////////////////////////
supersection "COMPOSITE CONSTRUCTS"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Setting and getting variables"
    ;*****************************************************************

        byteCode [
            a: 1
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :label

        ; ================================
        ;  CODE
        ; ================================
        ; consti1
        ; store0
        ; end

        byteCode [
            b: 2
            c: b
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: b :label
        ; 1: c :label

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; store0
        ; load0
        ; store1
        ; end

    ;*****************************************************************
    topic "Simple built-in function calls"
    ;*****************************************************************

        byteCode [abs 10]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: abs :word

        ; ================================
        ;  CODE
        ; ================================
        ; consti10
        ; call0
        ; end

        byteCode [empty? []]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: empty? :word

        ; ================================
        ;  CODE
        ; ================================
        ; consta
        ; call0
        ; end

        byteCode [couple [1 2] ["one" "two"]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: couple :word
        ; 1: [ :block
        ;         1 :integer
        ;         2 :integer
        ; ]
        ; 2: [ :block
        ;         one :string
        ;         two :string
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; call0
        ; end