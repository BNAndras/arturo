; Helper functions

spacer: "        "

supersection: function [title][
    cl: #magenta
    print ""
    print color cl repeat "*" 50
    print color cl "*"
    print color cl "* " ++ title
    print color cl "*"
    print color cl repeat "*" 50
]

topic: function [title][
    print ""
    print spacer ++ ">" ++ repeat "-" 50
    print spacer ++ "> " ++ color.bold #white title
    print spacer ++ ">" ++ repeat "-" 50
    print ""
]

byteCode: function [blk][
    btc: to :bytecode blk ++ [] ; this little hack is needed to remove newlines from our block
                                ; thus, avoiding all opEol/opEolX bytecode being produced

    inspect btc    ; uncomment this line to see the bytecode
                    ; in a more readable format
    prints spacer
    print ["input:" as.code blk]
    prints spacer
    print ["data:" get btc 'data]
    prints spacer
    cd: get btc 'code
    print ["code:" cd "(" ++ (to :string size cd) ++ " bytes)"]
    print ""
]

; Main unit-tests

;/////////////////////////////////////////////////////////
supersection "SIMPLE VALUES"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Boolean"
    ;*******************************************Ã¥**********************

        byteCode [true]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; constbt
        ; end

        byteCode [false]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; constbf
        ; end

        byteCode [maybe]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: maybe :word

        ; ================================
        ;  CODE
        ; ================================
        ; load0
        ; end

    ;*****************************************************************
    topic "Integer"
    ;*****************************************************************

        byteCode [1]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; consti1
        ; end

        byteCode [10]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; consti10
        ; end

        byteCode [123]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 123 :integer

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

        byteCode [1234567890123]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 1234567890123 :integer

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Floating"
    ;*****************************************************************

        byteCode [0.0]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; constf0
        ; end

        byteCode [1.0]
        ; ================================
        ;     DATA
        ; ================================

        ; ================================
        ;     CODE
        ; ================================
        ; constf1
        ; end

        byteCode [10.0]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 10.0 :floating

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

        byteCode [12345.1234567]
        ; ================================
        ;     DATA
        ; ================================
        ; 0: 12345.1234567 :floating

        ; ================================
        ;     CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Char"
    ;*****************************************************************

        byteCode [`a`]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :char

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [`ðŸ˜€`]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: ðŸ˜€ :char

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "String"
    ;*****************************************************************

        byteCode [""]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consts
        ; end

        byteCode ["Hello World!"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: Hello World! :string

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Regex"
    ;*****************************************************************

        byteCode [{/hello/}]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: hello :regex

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [{/[A-Z]+\d/}]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [A-Z]+\d :regex

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Type"
    ;*****************************************************************

        byteCode [:integer]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: integer :type

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [:string]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: string :type

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Literal"
    ;*****************************************************************

        byteCode ['a]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :literal

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode ['a 'b 'c]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :literal
        ; 1: b :literal
        ; 2: c :literal

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; push1
        ; push2
        ; end

    ;*****************************************************************
    topic "SymbolLiteral"
    ;*****************************************************************

        byteCode ['+]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: + :symbolliteral

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode ['-->]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: --> :symbolliteral

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Color"
    ;*****************************************************************

        byteCode [#red]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: #FF0000 :color

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [#00FF66]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: #00FF66 :color

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Quantity"
    ;*****************************************************************

        byteCode [1:EUR]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 1:EUR :quantity

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [12:m]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 12:m :quantity

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Version"
    ;*****************************************************************

        byteCode [0.9.82]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 0.9.82 :version

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [2.0.0-rc1]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 2.0.0-rc1 :version

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Block"
    ;*****************************************************************

        byteCode [[]]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consta
        ; end

        byteCode [[1 "hello" 3.14 true]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [ :block
        ;         1 :integer
        ;         hello :string
        ;         3.14 :floating
        ;         true :word
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

    ;*****************************************************************
    topic "Null"
    ;*****************************************************************

        byteCode [Ã¸]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; constn
        ; end

        byteCode [null]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: null :word

        ; ================================
        ;  CODE
        ; ================================
        ; load0
        ; end

;/////////////////////////////////////////////////////////
supersection "LABELS"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Setting and getting variables"
    ;*****************************************************************

        byteCode [
            a: 1
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :label

        ; ================================
        ;  CODE
        ; ================================
        ; consti1
        ; store0
        ; end

        byteCode [
            b: 2
            c: b
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: b :label
        ; 1: c :label

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; store0
        ; load0
        ; store1
        ; end

;/////////////////////////////////////////////////////////
supersection "FUNCTION CALLS"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Built-in function calls"
    ;*****************************************************************

        byteCode [abs 10]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: abs :word

        ; ================================
        ;  CODE
        ; ================================
        ; consti10
        ; call0
        ; end

        byteCode [empty? []]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: empty? :word

        ; ================================
        ;  CODE
        ; ================================
        ; consta
        ; call0
        ; end

        byteCode [couple [1 2] ["one" "two"]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: couple :word
        ; 1: [ :block
        ;         1 :integer
        ;         2 :integer
        ; ]
        ; 2: [ :block
        ;         one :string
        ;         two :string
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; call0
        ; end

    ;*****************************************************************
    topic "Opcoded built-in function calls"
    ;*****************************************************************

        byteCode [print 2]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; print
        ; end

        byteCode [size [1 2]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [ :block
        ;         1 :integer
        ;         2 :integer
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; size
        ; end

        byteCode [and 1 123]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 123 :integer

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; consti1
        ; band
        ; end

    ;*****************************************************************
    topic "Composite opcoded built-in function calls"
    ;*****************************************************************

        byteCode [to :floating 1]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: floating :type

        ; ================================
        ;  CODE
        ; ================================
        ; consti1
        ; push0
        ; to
        ; end

        byteCode [to :integer "10"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 10 :string

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; toi
        ; end

        byteCode [to :string 5]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consti5
        ; tos
        ; end

    ;*****************************************************************
    topic "Function calls with attributes"
    ;*****************************************************************

        byteCode [split.words "hello world"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: words :attribute
        ; 1: hello world :string

        ; ================================
        ;  CODE
        ; ================================
        ; push1
        ; constbt
        ; attr0
        ; split
        ; end

        byteCode [split.by:"X" "helloXworld"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: by :attributelabel
        ; 1: X :string
        ; 2: helloXworld :string

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; attr0
        ; split
        ; end

        byteCode [join.with:"-" ["hello" "world"]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: with :attributelabel
        ; 1: - :string
        ; 2: [ :block
        ;         hello :string
        ;         world :string
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; attr0
        ; join
        ; end

    ;*****************************************************************
    topic "Function calls via symbol aliases"
    ;*****************************************************************

        byteCode [@[1 2 3]]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [ :block
        ;         1 :integer
        ;         2 :integer
        ;         3 :integer
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; array
        ; end

        byteCode ["hello " ++ "world"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: append :word
        ; 1: hello  :string
        ; 2: world :string

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; call0
        ; end

        byteCode [1..25]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: 25 :integer

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; consti1
        ; range
        ; end

    ;*****************************************************************
    topic "User function definition & calling"
    ;*****************************************************************

        byteCode [
            h: function [][print "function called"]

            print "before"
            h
            print "after"
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: h :label
        ; 1: [ :block
        ;         print :word
        ;         function called :string
        ; ]
        ; 2: before :string
        ; 3: after :string

        ; ================================
        ;  CODE
        ; ================================
        ; push1
        ; consta
        ; func
        ; store0
        ; push2
        ; print
        ; call0
        ; push3
        ; print
        ; end

        byteCode [
            f: function [x][x + 1]

            print "before"
            print f 10
            print "after"
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: f :label
        ; 1: [ :block
        ;         x :word
        ; ]
        ; 2: [ :block
        ;         x :word
        ;         + :symbol
        ;         1 :integer
        ; ]
        ; 3: before :string
        ; 4: after :string

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; func
        ; store0
        ; push3
        ; print
        ; consti10
        ; call0
        ; print
        ; push4
        ; print
        ; end

        byteCode [
            g: $[z w][2 * z * w]

            print "before"
            print g 10 20
            print "after"
        ]

        ; ================================
        ;  DATA
        ; ================================
        ; 0: g :label
        ; 1: [ :block
        ;         z :word
        ;         w :word
        ; ]
        ; 2: [ :block
        ;         2 :integer
        ;         * :symbol
        ;         z :word
        ;         * :symbol
        ;         w :word
        ; ]
        ; 3: before :string
        ; 4: 20 :integer
        ; 5: after :string

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; func
        ; store0
        ; push3
        ; print
        ; push4
        ; consti10
        ; call0
        ; print
        ; push5
        ; print
        ; end

;/////////////////////////////////////////////////////////
supersection "PATHS"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Path values"
    ;*****************************************************************
        
        byteCode [a\0]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :word
        ; 1: 0 :integer

        ; ================================
        ;  CODE
        ; ================================
        ; push1
        ; load0
        ; get
        ; end

        byteCode [user\name]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: user :word
        ; 1: name :literal

        ; ================================
        ;  CODE
        ; ================================
        ; push1
        ; load0
        ; get
        ; end

        byteCode [user\grades\0]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: user :word
        ; 1: grades :literal
        ; 2: 0 :integer

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; load0
        ; get
        ; get
        ; end

        byteCode [user\address\country]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: user :word
        ; 1: address :literal
        ; 2: country :literal

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; load0
        ; get
        ; get
        ; end

    ;*****************************************************************
    topic "PathLabel values"
    ;*****************************************************************

        byteCode [a\0: 10]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :word
        ; 1: 0 :integer

        ; ================================
        ;  CODE
        ; ================================
        ; consti10
        ; push1
        ; load0
        ; set
        ; end

        byteCode [user\name: "John"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: user :word
        ; 1: name :literal
        ; 2: John :string

        ; ================================
        ;  CODE
        ; ================================
        ; push2
        ; push1
        ; load0
        ; set
        ; end

        byteCode [user\grades\0: 6]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: user :word
        ; 1: grades :literal
        ; 2: 0 :integer

        ; ================================
        ;  CODE
        ; ================================
        ; consti6
        ; push2
        ; push1
        ; load0
        ; get
        ; set
        ; end

        byteCode [user\address\country: "USA"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: user :word
        ; 1: address :literal
        ; 2: country :literal
        ; 3: USA :string

        ; ================================
        ;  CODE
        ; ================================
        ; push3
        ; push2
        ; push1
        ; load0
        ; get
        ; set
        ; end

;/////////////////////////////////////////////////////////
supersection "BLOCKS & SYNTACTIC SUGAR"
;/////////////////////////////////////////////////////////

    ;*****************************************************************
    topic "Inline blocks"
    ;*****************************************************************

        byteCode [(print 2)]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; print
        ; end

        byteCode [(print 2) (print 3)]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; print
        ; consti3
        ; print
        ; end

        ; TODO: this is not working!!! (see #804)
        ; byteCode [(print 2 print 3)]
        ; ================================
        ;  DATA
        ; ================================

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; print
        ; consti3
        ; print
        ; end

    ;*****************************************************************
    topic "doublecolon syntactic sugar (`::`)"
    ;*****************************************************************

        byteCode [
            print 2
            do :: 
                print 3
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: do :word
        ; 1: [ :block
        ;         print :word
        ;         3 :integer
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; print
        ; push1
        ; call0
        ; end

    ;*****************************************************************
    topic "arrowright syntactic sugar (`->`)"
    ;*****************************************************************

        byteCode [-> "hello"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [ :block
        ;         hello :string
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; end

        byteCode [
            do -> print "hello"
            print "done"
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: do :word
        ; 1: [ :block
        ;         print :word
        ;         hello :string
        ; ]
        ; 2: done :string

        ; ================================
        ;  CODE
        ; ================================
        ; push1
        ; call0
        ; push2
        ; print
        ; end

        byteCode [
            a: -> upper "hello"
            b: -> "hello " ++ world
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: a :label
        ; 1: [ :block
        ;         upper :word
        ;         hello :string
        ; ]
        ; 2: b :label
        ; 3: [ :block
        ;         hello  :string
        ;         ++ :symbol
        ;         world :word
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push1
        ; store0
        ; push3
        ; store2
        ; end

    ;*****************************************************************
    topic "thickarrowright syntactic sugar (`=>`)"
    ;*****************************************************************

        byteCode [=> "hello"]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: [ :block

        ; ]
        ; 1: [ :block
        ;         hello :string
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; push1
        ; end

        byteCode [
            f: function => print
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: f :label
        ; 1: function :word
        ; 2: [ :block
        ;         _0 :word
        ; ]
        ; 3: [ :block
        ;         print :word
        ;         _0 :word
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push3
        ; push2
        ; call1
        ; store0
        ; end

        byteCode [
            adder: $ => add
        ]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: adder :label
        ; 1: function :word
        ; 2: [ :block
        ;         _0 :word
        ;         _1 :word
        ; ]
        ; 3: [ :block
        ;         add :word
        ;         _0 :word
        ;         _1 :word
        ; ]

        ; ================================
        ;  CODE
        ; ================================
        ; push3
        ; push2
        ; call1
        ; store0
        ; end

    ;*****************************************************************
    topic "pipe operator (`|`)"
    ;*****************************************************************

        byteCode [2 | print]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: print :word

        ; ================================
        ;  CODE
        ; ================================
        ; consti2
        ; call0
        ; end

        ; TODO: this is not working!!! (see #802)
        ; byteCode ["hello" | upper | print]
        ; ================================
        ;  DATA
        ; ================================
        ; 0: hello :string
        ; 1: upper :word

        ; ================================
        ;  CODE
        ; ================================
        ; push0
        ; call1
        ; print
        ; end