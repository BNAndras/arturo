; helper function
debug: $[variable][
    print[variable type variable]
]

topic: $[topic :string] -> print ~"\n>> |topic|"
passed: $[] -> print "[+] passed!"

; ==> Tests

topic "add"
do [
    
    topic "add - :integer :integer"
    
    ensure -> 2 = 1 + 1
    ensure -> 2 = add 1 1
    passed
    
    ensure -> 3 = 1 + 2
    ensure -> 3 = 2 + 1
    ensure -> 3 = add 1 2
    ensure -> 3 = add 2 1
    passed
    
    a: 2
    add 'a 1
    ensure -> a = 3
    'a + 1
    ensure -> a = 4
    passed
    
    ensure -> 0 = 1 + (neg 1)
    ensure -> 0 = (neg 1) + 1
    ensure -> 0 = add 1 (neg 1)
    ensure -> 0 = add (neg 1) 1
    passed
    
    
    topic "add - :int :floating"
    
    ensure -> 2.0 = 1 + 1.0
    ensure -> 2.0 = 1.0 + 1
    ensure -> 2.0 = add 1 1.0
    ensure -> 2.0 = add 1.0 1
    passed
    
    a: 2
    add 'a 1.0  ; int + float
    ensure -> a = 3.0
    'a + 1      ; float + int
    ensure -> a = 4.0
    passed
    
    
    topic "add - :int :complex"
    a: to :complex [1 2]
    ensure -> (to :complex [2.0 2.0]) = a + 1
    ensure -> (to :complex [2.0 2.0]) = 1 + a
    ensure -> (to :complex [2.0 2.0]) = add a 1
    ensure -> (to :complex [2.0 2.0]) = add 1 a
    passed
    
    ; :complex :integer
    a: to :complex [1 2]
    
    'a + 1
    ensure -> (to :complex [2.0 2.0]) = a
    add 'a 1
    ensure -> (to :complex [3.0 2.0]) = a
    passed
    
    ; :integer :complex
    a: 1
    'a + to :complex [1 2]
    ensure -> (to :complex [2.0 2.0]) = a
    a: 1
    add 'a to :complex [1 1]
    ensure -> (to :complex [2 1]) = a
    passed
    
    
    topic "add - :int :rational"
    
    a: to :rational [3 5]
    expected: to :rational [8 5]
    ensure -> expected = a + 1
    ensure -> expected = 1 + a
    ensure -> expected = add a 1
    ensure -> expected = add 1 a
    passed
    
    ; :rational :integer
    a: to :rational [3 5]
    'a + 1
    ensure -> a = to :rational [8 5]
    add 'a 1
    ensure -> a = to :rational [13 5]
    passed
    
    ; :integer :rational
    a: 1
    'a + to :rational [3 5]
    ensure -> a = to :rational [8 5]
    a: 1
    add 'a to :rational [3 5]
    ensure -> a = to :rational [8 5]
    passed
    
    
    topic "add - :int :quantity"
    ; todo
    
    
    topic "add - :int :color"
    
    ensure -> null = 1 + #red
    ensure -> null = #red + 1
    ensure -> null = add 1 #red
    ensure -> null = add #red 1
    passed  
    
    ; :integer :color
    a: 1
    'a + #red
    ensure -> a = null
    
    a: 1
    add 'a #red
    ensure -> a = null
    passed
    
    ; :color :integer
    a: #red
    'a + 1
    ensure -> a = null
    
    a: #red
    add 'a 1
    ensure -> a = null
    passed
    
    
    ; ------ floating
    
    topic "add - :floating :floating"
    
    ensure -> 2 = 1.0 + 1.0
    ensure -> 2 = add 1.0 1.0
    passed
    
    ensure -> 2.0 = 1.0 + 1.0
    ensure -> 2.0 = add 1.0 1.0
    passed
    
    ensure -> 4 = 1.5 + 2.5
    ensure -> 4 = 2.5 + 1.5
    ensure -> 4 = add 1.5 2.5
    ensure -> 4 = add 2.5 1.5
    passed
    
    ensure -> 4.0 = 1.5 + 2.5
    ensure -> 4.0 = 2.5 + 1.5
    ensure -> 4.0 = add 1.5 2.5
    ensure -> 4.0 = add 2.5 1.5
    passed
    
    a: 2.5
    add 'a 1.5
    ensure -> a = 4.0
    'a + 1.5
    ensure -> a = 5.5
    passed
    
    ensure -> 0 = 1.5 + (neg 1.5)
    ensure -> 0 = (neg 1.5) + 1.5
    ensure -> 0 = add 1.5 (neg 1.5)
    ensure -> 0 = add (neg 1.5) 1.5
    passed
    
    
    topic "add - :floating :complex"
    a: to :complex [1 2]
    ensure -> (to :complex [2.5 2.0]) = a + 1.5
    ensure -> (to :complex [2.5 2.0]) = 1.5 + a
    ensure -> (to :complex [2.5 2.0]) = add a 1.5
    ensure -> (to :complex [2.5 2.0]) = add 1.5 a
    passed
    
    ; :complex :floating
    a: to :complex [1 2]
    
    'a + 1.5
    ensure -> (to :complex [2.5 2.0]) = a
    add 'a 1.5
    ensure -> (to :complex [4 2.0]) = a
    passed
    
    ; :floating :complex
    a: 1.5
    'a + to :complex [1 2]
    ensure -> (to :complex [2.5 2.0]) = a
    a: 1.5
    add 'a to :complex [1 2]
    ensure -> (to :complex [2.5 2.0]) = a
    passed
    
    
    topic "add - :floating :rational"
    
    a: to :rational [3 5]
    expected: to :rational [11 10]
    ensure -> expected = a + 0.5
    ensure -> expected = 0.5 + a
    ensure -> expected = add a 0.5
    ensure -> expected = add 0.5 a
    passed
    
    a: to :rational [3 5]
    'a + 0.5
    ensure -> a = to :rational [11 10]
    add 'a 1.0
    ensure -> a = to :rational [21 10]
    passed
    
    
    topic "add - :floating :quantity"
    ; todo
    
    
    topic "add - :floating :color"
    
    ensure -> null = 1.5 + #red
    ensure -> null = #red + 1.5
    ensure -> null = add 1.5 #red
    ensure -> null = add #red 1.5
    passed  
    
    ; :floating :color
    a: 1.5
    'a + #red
    ensure -> a = null
    
    a: 1.5
    add 'a #red
    ensure -> a = null
    passed
    
    ; :color :floating
    a: #red
    'a + 1.5
    ensure -> a = null
    
    a: #red
    add 'a 1.5
    ensure -> a = null
    passed
    
    
    ; ------ complex
     
    topic "add - :complex :complex"
    
    a: to :complex [1 2]
    b: to :complex [2 1]
    ensure -> (to :complex [3.0 3.0]) = a + b
    ensure -> (to :complex [3.0 3.0]) = b + a
    ensure -> (to :complex [3.0 3.0]) = add a b
    ensure -> (to :complex [3.0 3.0]) = add b a
    passed
    
    a: to :complex [1 2]
    b: to :complex [2 1]
    
    'a + b
    ensure -> (to :complex [3.0 3.0]) = a
    add 'a b
    ensure -> (to :complex [5 4]) = a
    passed
    
    
    topic "add - :complex :rational"
    
    a: to :complex [1 2]
    b: to :rational [3 5]
    expected: to :rational [11 10]
    ensure -> null = a + b
    ensure -> null = b + a
    ensure -> null = add a b
    ensure -> null = add b a
    passed
    
    ; :complex :rational - :rational :complex
    a: to :complex [1 2]
    b: to :rational [3 5]
    
    'a + b
    ensure -> a = to :complex [1 2]
    passed
    
    add 'b a
    ensure -> b = to :rational [3 5]
    passed
    
    
    topic "add - :complex :quantity"
    ; todo
    
    
    topic "add - :complex :color"
    
    a: to :complex [1 2]
    ensure -> null = a + #red
    ensure -> null = #red + a
    ensure -> null = add a #red
    ensure -> null = add #red a
    passed  
    
    ; :complex :color
    a: to :complex [1 2]
    'a + #red
    ensure -> a = null
    
    a: to :complex [1 2]
    add 'a #red
    ensure -> a = null
    passed
    
    ; :color :complex
    a: #red
    'a + to :complex [1 2]
    ensure -> a = null
    
    a: #red
    add 'a to :complex [1 2]
    ensure -> a = null
    passed

    
    ; ------ rational
     
    topic "add - :rational :rational"
    
    a: to :rational [3 5]
    b: to :rational [1 2]
    ensure -> (to :rational [11 10]) = a + b
    ensure -> (to :rational [11 10]) = b + a
    ensure -> (to :rational [11 10]) = add a b
    ensure -> (to :rational [11 10]) = add b a
    passed
    
    a: to :rational [3 5]
    b: to :rational [1 2]
    
    'a + b
    ensure -> (to :rational [11 10]) = a
    add 'a b
    ensure -> (to :rational [8 5]) = a
    ensure -> (to :rational [32 20]) = a
    passed
    
    
    topic "add - :rational :quantity"
    ; todo
    
    
    topic "add - :rational :color"
    
    a: to :rational [3 5]
    ensure -> null = a + #red
    ensure -> null = #red + a
    ensure -> null = add a #red
    ensure -> null = add #red a
    passed  
    
    ; :complex :color
    a: to :rational [3 5]
    'a + #red
    ensure -> a = null
    
    a: to :rational [3 5]
    add 'a #red
    ensure -> a = null
    passed
    
    ; :color :complex
    a: #red
    'a + to :rational [3 5]
    ensure -> a = null
    
    a: #red
    add 'a to :rational [3 5]
    ensure -> a = null
    passed
    
    ; ------ color
     
    topic "add - :color :color"
    
    ensure -> #red = #red + #red
    ensure -> #white = #black + #white
    ensure -> #white = #white + #black
    ensure -> #red = add #red #red
    ensure -> #white = add #black #white
    ensure -> #white = add #white #black
    passed
    
    ensure -> #FF00FF = #blue + #red
    ensure -> #808080 = #gray + #black
    ensure -> #FF00FF = add #blue #red
    ensure -> #808080 = add #gray #black
    passed
    
    
    a: #gray
    'a + #black
    ensure -> #gray = a
    'a + #blue
    ensure -> #8080FF = a
    
    topic "add - :color :quantity"
    ; todo
    
    
    ; ------ quantity
     
    topic "add - :quantity :quantity"

    
]

topic "sub"
do [
    
    topic "sub - :integer :integer"
    
    ensure -> 2 = 4 - 2
    ensure -> 2 = sub 4 2
    passed
    
    ensure -> 3 = 5 - 2
    ensure -> 3 = sub 5 2
    ensure -> 3 <> 2 - 5
    ensure -> (neg 3) =  2 - 5
    ensure -> 3 <> sub 2 5
    ensure -> (neg 3) =  sub 2 5
    passed
    
    a: 2
    sub 'a 1
    ensure -> a = 1
    'a - 2
    ensure -> a = neg 1
    passed
    
    ensure -> 2 = 1 - neg 1
    ensure -> (neg 2) = (neg 1) - 1
    ensure -> 2 = sub 1 neg 1
    ensure -> (neg 2) = sub neg 1 1
    passed
    
    
    topic "sub - :int :floating"
    
    ensure -> 2.0 = 3 - 1.0
    ensure -> 2.0 = 3.0 - 1
    ensure -> 2.0 = sub 3 1.0
    ensure -> 2.0 = sub 3.0 1
    passed
    
    a: 2
    sub 'a 1.0  ; int + float
    ensure -> a = 1.0
    'a - 1      ; float + int
    ensure -> a = 0.0
    passed
    
    
    topic "sub - :int :complex"
    
    a: to :complex [1 2]
    ensure -> (to :complex [0.0 2.0]) = a - 1
    ensure -> (to :complex @[0.0 (neg 2.0)]) = 1 - a
    ensure -> (to :complex [0.0 2.0]) = sub a 1
    ensure -> (to :complex @[0.0 (neg 2.0)]) = sub 1 a
    passed
    
    ; :complex :integer
    a: to :complex [1 2]
    'a - 1
    ensure -> (to :complex [0.0 2.0]) = a
    sub 'a 1
    ensure -> (to :complex @[(neg 1.0) 2.0]) = a
    passed
    
    ; :integer :complex
    a: 1
    'a - to :complex [1 2]
    ensure -> (to :complex @[0 neg 2]) = a
    a: 1
    sub 'a to :complex [1 1]
    ensure -> (to :complex @[0 neg 1]) = a
    passed
    
    
    topic "sub - :int :rational"
    
    a: to :rational [3 5]
    expected1: to :rational @[(neg 2) 5]
    expected2: to :rational @[2 5]
    ensure -> expected1 = a - 1
    ensure -> expected2 = 1 - a
    ensure -> expected1 = sub a 1
    ensure -> expected2 = sub 1 a
    passed
    
    ; :rational :integer
    a: to :rational [3 5]
    'a - 1
    ensure -> a = to :rational @[(neg 2) 5]
    sub 'a 1
    ensure -> a = to :rational @[(neg 7) 5]
    passed
    
    ; :integer :rational
    a: 1
    'a - to :rational [3 5]
    ensure -> a = to :rational @[2 5]
    sub 'a to :rational [3 5]
    ensure -> a = to :rational @[(neg 1) 5]
    passed
    
    
    topic "sub - :int :quantity"
    ; todo
    
    
    topic "sub - :int :color"
    
    ensure -> null = 1 - #red
    ensure -> null = #red - 1
    ensure -> null = sub 1 #red
    ensure -> null = sub #red 1
    passed  
    
    ; :integer :color
    a: 1
    'a - #red
    ensure -> a = null
    
    a: 1
    sub 'a #red
    ensure -> a = null
    passed
    
    ; :color :integer
    a: #red
    'a - 1
    ensure -> a = null
    
    a: #red
    sub 'a 1
    ensure -> a = null
    passed
    
    
    ; ------ floating
    
    topic "sub - :floating :floating"
    
    ensure -> 2 = 3.0 - 1.0
    ensure -> 2 = sub 3.0 1.0
    passed
    
    ensure -> (neg 1) = 1.5 - 2.5
    ensure -> 1 = 2.5 - 1.5
    ensure -> (neg 1) = sub 1.5 2.5
    ensure -> 1 = sub 2.5 1.5
    passed
    
    ensure -> (neg 1.0) = 1.5 - 2.5
    ensure -> 1.0 = 2.5 - 1.5
    ensure -> (neg 1.0) = sub 1.5 2.5
    ensure -> 1.0 = sub 2.5 1.5
    passed
    
    a: 2.5
    sub 'a 1.5
    ensure -> a = 1.0
    'a - 1.5
    ensure -> a = neg 0.5
    passed
    
    ensure -> 3 = 1.5 - (neg 1.5)
    ensure -> (neg 3.0) = (neg 1.5) - 1.5
    ensure -> 3.0 = sub 1.5 (neg 1.5)
    ensure -> (neg 3) = sub (neg 1.5) 1.5
    passed
    
    
    topic "sub - :floating :complex"
    
    a: to :complex [1 2]
    ensure -> (to :complex @[(neg 0.5) 2.0]) = a - 1.5
    ensure -> (to :complex @[0.5 neg 2]) = 1.5 - a
    ensure -> (to :complex @[(neg 0.5) 2.0]) = sub a 1.5
    ensure -> (to :complex @[0.5 neg 2]) = sub 1.5 a
    passed
    
    ; :complex :floating
    a: to :complex [1 2]
    
    'a - 1.5
    ensure -> a = to :complex @[(neg 0.5) 2.0]
    sub 'a 1.5
    ensure -> a = to :complex @[(neg 2.0) 2.0]
    passed
    
    ; :floating :complex
    a: 1.5
    'a - to :complex [1 2]
    ensure -> a = to :complex @[0.5 neg 2.0]
    a: 1.5
    sub 'a to :complex [1 2]
    ensure -> a = to :complex @[0.5 neg 2.0]
    passed
    
    
    topic "sub - :floating :rational"
    
    a: to :rational [3 5]
    expected: to :rational [1 10]
    expected2: to :rational @[(neg 1) 10]
    ensure -> expected = a - 0.5
    ensure -> expected2 = 0.5 - a
    ensure -> expected = sub a 0.5
    ensure -> expected2 = sub 0.5 a
    passed
    
    a: to :rational [3 5]
    'a - 0.5
    ensure -> a = to :rational [1 10]
    sub 'a 1.0
    ensure -> a = to :rational @[(neg 9) 10]
    passed
    
    
    topic "sub - :floating :quantity"
    ; todo
    
    
    topic "sub - :floating :color"
    
    ensure -> null = 1.5 - #red
    ensure -> null = #red - 1.5
    ensure -> null = sub 1.5 #red
    ensure -> null = sub #red 1.5
    passed  
    
    ; :floating :color
    a: 1.5
    'a - #red
    ensure -> a = null
    
    a: 1.5
    sub 'a #red
    ensure -> a = null
    passed
    
    ; :color :floating
    a: #red
    'a - 1.5
    ensure -> a = null
    
    a: #red
    sub 'a 1.5
    ensure -> a = null
    passed
    
    
    ; ------ complex
     
    topic "sub - :complex :complex"
    
    a: to :complex [1 2]
    b: to :complex [2 1]
    ensure -> (to :complex @[(neg 1.0) 1.0]) = a - b
    ensure -> (to :complex @[1.0 (neg 1.0)]) = b - a
    ensure -> (to :complex @[(neg 1.0) 1.0]) = sub a b
    ensure -> (to :complex @[1.0 (neg 1.0)]) = sub b a
    passed
    
    a: to :complex [1 2]
    b: to :complex [2 1]
    
    'a - b
    ensure -> (to :complex @[(neg 1.0) 1.0]) = a
    sub 'a b
    ensure -> (to :complex @[(neg 3.0) 0.0]) = a
    passed
    
    
    topic "sub - :complex :rational"
    
    a: to :complex [1 2]
    b: to :rational [3 5]
    expected: to :rational [11 10]
    ensure -> null = a - b
    ensure -> null = b - a
    ensure -> null = sub a b
    ensure -> null = sub b a
    passed
    
    ; :complex :rational - :rational :complex
    a: to :complex [1 2]
    b: to :rational [3 5]
    
    'a - b
    ensure -> a = to :complex [1 2]
    passed
    
    sub 'b a
    ensure -> b = to :rational [3 5]
    passed
    
    
    topic "sub - :complex :quantity"
    ; todo
    
    
    topic "sub - :complex :color"
    
    a: to :complex [1 2]
    ensure -> null = a - #red
    ensure -> null = #red - a
    ensure -> null = sub a #red
    ensure -> null = sub #red a
    passed  
    
    ; :complex :color
    a: to :complex [1 2]
    'a - #red
    ensure -> a = null
    
    a: to :complex [1 2]
    add 'a #red
    ensure -> a = null
    passed
    
    ; :color :complex
    a: #red
    'a + to :complex [1 2]
    ensure -> a = null
    
    a: #red
    add 'a to :complex [1 2]
    ensure -> a = null
    passed

    
    ; ------ rational
     
    topic "sub - :rational :rational"
    
    a: to :rational [3 5]
    b: to :rational [1 2]
    ensure -> (to :rational [1 10]) = a - b
    ensure -> (to :rational @[(neg 1) 10]) = b - a
    ensure -> (to :rational [1 10]) = sub a b
    ensure -> (to :rational @[(neg 1) 10]) = sub b a
    passed
    
    a: to :rational [3 5]
    b: to :rational [1 2]
    
    'a - b
    ensure -> (to :rational [1 10]) = a
    sub 'a b
    ensure -> (to :rational @[(neg 2) 5]) = a
    passed
    
    
    topic "sub - :rational :quantity"
    ; todo
    
    
    topic "sub - :rational :color"
    
    a: to :rational [3 5]
    ensure -> null = a - #red
    ensure -> null = #red - a
    ensure -> null = sub a #red
    ensure -> null = sub #red a
    passed  
    
    ; :complex :color
    a: to :rational [3 5]
    'a - #red
    ensure -> a = null
    
    a: to :rational [3 5]
    sub 'a #red
    ensure -> a = null
    passed
    
    ; :color :complex
    a: #red
    'a - to :rational [3 5]
    ensure -> a = null
    
    a: #red
    sub 'a to :rational [3 5]
    ensure -> a = null
    passed
    
    ; ------ color
     
    topic "sub - :color :color"
    
    ensure -> #00000000 = #red - #red
    ensure -> #00000000 = #black - #white
    ensure -> #FFFFFF00 = #white - #black
    ensure -> #00000000 = sub #red #red
    ensure -> #00000000 = sub #black #white
    ensure -> #FFFFFF00 = sub #white #black
    passed
    
    ensure -> #0000FF00 = #blue - #red
    ensure -> #80808000 = #gray - #black
    ensure -> #0000FF00 = sub #blue #red
    ensure -> #80808000 = sub #gray #black
    passed
    
    a: #gray
    'a - #black
    ensure -> #80808000 = a
    'a - #blue
    ensure -> #80800000 = a
    
    topic "sub - :color :quantity"
    ; todo
    
    
    ; ------ quantity
     
    topic "sub - :quantity :quantity"

    
]

print mul 2 3
print 2*3
z: new 2
mul 'z 3
print z

print div 7 3
print 7/3
w: new 7
div 'w 3
print w

print fdiv 7 3

print mod 10 3
print 10%3
q: new 10
mod 'q 3
print q

print pow 2 3
print 2^3

; operator lack of precedence
print add 1 mul 2 3
print 1+2*3
print 2*3+1
print (1+2)*3

; other functions
print neg 1

print inc 3
a: new 3
inc 'a
print a

print dec 3
b: new 3
dec 'b
print b
