; helper function
debug: $[variable][
    print[variable type variable]
]

topic: $[topic :string] -> print ~"\n>> |topic|"
passed: $[] -> print "[+] passed!"


; ==> Tests

topic « equal?
do [
    
    topic « :integer :floating :rational
    
    ensure -> equal? 1 1
    ensure -> equal? 1 1.0
    ensure -> equal? 1 to :rational @[1 1]
    ensure -> equal? 1 to :rational @[5 5]
    ensure -> 1 = 1
    ensure -> 1 = 1.0
    ensure -> 1 = to :rational @[1 1]
    ensure -> 1 = to :rational @[5 5]
    passed
    
    ensure -> equal? 1.0 1
    ensure -> equal? 1.0 1.0
    ensure -> equal? 1.0 to :rational @[1 1]
    ensure -> equal? 1.0 to :rational @[5 5]
    ensure -> 1.0 = 1
    ensure -> 1.0 = 1.0
    ensure -> 1.0 = to :rational @[1 1]
    ensure -> 1.0 = to :rational @[5 5]
    passed
    
    ensure -> equal? to :rational @[5 5] 1
    ensure -> equal? to :rational @[5 5] 1.0
    ensure -> equal? to :rational @[5 5] to :rational @[1 1]
    ensure -> (to :rational @[5 5]) = 1
    ensure -> (to :rational @[5 5]) = 1.0
    ensure -> (to :rational @[5 5]) = to :rational @[1 1]
    passed
    
    topic « :quantity
    
    ensure -> equal? 1:usd 1
    ensure -> equal? 1:m   1
    ensure -> equal? 1:m2  1
    ensure -> equal? 1:m3  1
    ensure -> equal? 1:c   1
    ensure -> equal? 1:f   1
    ensure -> 1:usd = 1
    ensure -> 1:m   = 1
    ensure -> 1:m2  = 1
    ensure -> 1:m3  = 1
    ensure -> 1:c   = 1
    ensure -> 1:f   = 1
    passed
    
    ensure -> equal? 1 1:usd
    ensure -> equal? 1 1:m
    ensure -> equal? 1 1:m2
    ensure -> equal? 1 1:m3
    ensure -> equal? 1 1:c
    ensure -> equal? 1 1:f
    ensure -> 1 = 1:usd
    ensure -> 1 = 1:m
    ensure -> 1 = 1:m2
    ensure -> 1 = 1:m3
    ensure -> 1 = 1:c
    ensure -> 1 = 1:f
    passed
    
    ensure -> equal? 1:usd 1.0
    ensure -> equal? 1:m   1.0
    ensure -> equal? 1:m2  1.0
    ensure -> equal? 1:m3  1.0
    ensure -> equal? 1:c   1.0
    ensure -> equal? 1:f   1.0
    ensure -> 1:usd = 1.0
    ensure -> 1:m   = 1.0
    ensure -> 1:m2  = 1.0
    ensure -> 1:m3  = 1.0
    ensure -> 1:c   = 1.0
    ensure -> 1:f   = 1.0
    passed
    
    ensure -> equal? 1.0 1:usd
    ensure -> equal? 1.0 1:m
    ensure -> equal? 1.0 1:m2
    ensure -> equal? 1.0 1:m3
    ensure -> equal? 1.0 1:c
    ensure -> equal? 1.0 1:f
    ensure -> 1.0 = 1:usd
    ensure -> 1.0 = 1:m
    ensure -> 1.0 = 1:m2
    ensure -> 1.0 = 1:m3
    ensure -> 1.0 = 1:c
    ensure -> 1.0 = 1:f
    passed
    
    ensure -> equal? 1:usd to :rational @[5 5]
    ensure -> equal? 1:m   to :rational @[5 5]
    ensure -> equal? 1:m2  to :rational @[5 5]
    ensure -> equal? 1:m3  to :rational @[5 5]
    ensure -> equal? 1:c   to :rational @[5 5]
    ensure -> equal? 1:f   to :rational @[5 5]
    ensure -> 1:usd = to :rational @[5 5]
    ensure -> 1:m   = to :rational @[5 5]
    ensure -> 1:m2  = to :rational @[5 5]
    ensure -> 1:m3  = to :rational @[5 5]
    ensure -> 1:c   = to :rational @[5 5]
    ensure -> 1:f   = to :rational @[5 5]
    passed
    
    ensure -> equal? to :rational @[5 5] 1:usd
    ensure -> equal? to :rational @[5 5] 1:m
    ensure -> equal? to :rational @[5 5] 1:m2
    ensure -> equal? to :rational @[5 5] 1:m3
    ensure -> equal? to :rational @[5 5] 1:c
    ensure -> equal? to :rational @[5 5] 1:f
    ensure -> (to :rational @[5 5]) = 1:usd
    ensure -> (to :rational @[5 5]) = 1:m
    ensure -> (to :rational @[5 5]) = 1:m2
    ensure -> (to :rational @[5 5]) = 1:m3
    ensure -> (to :rational @[5 5]) = 1:c
    ensure -> (to :rational @[5 5]) = 1:f
    passed
    
    topic « other types
    
    ensure -> equal? null null
    ensure -> equal? null ø
    ensure -> equal? ø ø
    ensure -> equal? ø null
    ensure -> not? equal? ø 1
    ensure -> not? equal? ø 1.0
    ensure -> not? equal? ø "ø"
    ensure -> not? equal? ø `ø`
    ensure -> null = null
    ensure -> null = ø
    ensure -> ø = ø
    ensure -> ø = null
    ensure -> not? ø = 1
    ensure -> not? ø = 1.0
    ensure -> not? ø = "ø"
    ensure -> not? ø = `ø`
    passed
    
    ensure -> equal? true true
    ensure -> equal? true (1 > 0)
    ensure -> not? equal? true maybe
    ensure -> not? equal? true false
    ensure -> true = true
    ensure -> true = (1 > 0)
    ensure -> not? true = maybe
    ensure -> not? true = false
    passed
    
    ensure -> equal? to :complex [0 2] ((to :complex [1 2]) - 1) 
    ensure -> not? equal? to :complex [1 2] to :complex @[neg 1 2] 
    ensure -> not? equal? to :complex [1 2] 1
    ensure -> not? equal? 1 to :complex [1 2]
    ensure -> (to :complex [0 2]) = ((to :complex [1 2]) - 1) 
    ensure -> not? (to :complex [1 2]) = to :complex @[neg 1 2] 
    ensure -> not? (to :complex [1 2]) = 1
    ensure -> not? 1 = to :complex [1 2]
    passed
    
    ensure -> equal? 1.2.3 1.2.3
    ensure -> not? equal? 1.2.3 1.2.3-pre
    ensure -> not? equal? 1.2.3 1.2.3-dev
    ensure -> 1.2.3 = 1.2.3
    ensure -> not? 1.2.3 = 1.2.3-pre
    ensure -> not? 1.2.3 = 1.2.3-dev
    passed
    
    ensure -> equal? :string type "a"
    ensure -> equal? :integer type 1
    ensure -> equal? :floating type 1.5
    passed
    
    ensure -> equal? `a` `a`
    ensure -> not? equal? `a` "a" 
    ensure -> not? equal? `a` `b`
    ensure -> not? equal? `1` 1
    ensure -> not? equal? "a" `a` 
    ensure -> not? equal? `b` `a`
    ensure -> not? equal? 1   `1`
    ensure -> `a` = `a`
    ensure -> not? `a` = "a" 
    ensure -> not? `a` = `b`
    ensure -> not? `1` =  1
    ensure -> not? "a" = `a` 
    ensure -> not? `b` = `a`
    ensure -> not?  1  = `1`
    passed 
    
    ensure -> equal? "Art" "Arturo" -- "uro"
    ensure -> not? equal? "a"    `a` 
    ensure -> not? equal? "10"   10 
    ensure -> not? equal? "10"   10
    ensure -> not? equal? ["help"] [help]
    ensure -> not? equal? ["a"]    [a: "a"]
    ensure -> not? equal? "help"   'help
    ensure -> not? equal? ["help"] [.help]
    ensure -> not? equal? ["help"] ['help: "help"]
    ensure -> "Art" = "Arturo" -- "uro"
    ensure -> not? "a"      = `a` 
    ensure -> not? "10"     = 10 
    ensure -> not? "10"     = 10
    ensure -> not? ["help"] = [help]
    ensure -> not? ["a"]    = [a: "a"]
    ensure -> not? "help"   = 'help
    ensure -> not? ["help"] = [.help]
    ensure -> not? ["help"] = ['help: "help"]
    passed
    
    ensure -> equal? [word] [word]
    ensure -> not? equal? [word] [otherWord]
    ensure -> not? equal? [word] ["word"]
    ensure -> not? equal? [word] [word: word]
    ensure -> not? equal? [word] ['word]
    ; ensure -> not? equal? [word] [.word]
    ensure -> not? equal? [word] [.word: word]
    passed
    
    ensure -> equal? [label: value] [label: value]
    ensure -> not? equal? [label: value] [label: value2]
    ensure -> not? equal? [label: value] [label2: value]
    ensure -> not? equal? [label: value] ["label"]
    ensure -> not? equal? ["label": value] ["label"]
    ensure -> not? equal? [label: value] ["value"]
    ensure -> not? equal? [label: "value"] ["value"]
    ensure -> not? equal? [label: 'world] ['label]
    ensure -> not? equal? [label: 'world] ['word]
    ensure -> not? equal? [label: .attr] [.label]
    ensure -> not? equal? [label: .attr] [.attr]
    ; ensure -> not? equal? [label: .attr: "a"] [.label: .attr: "a"]
    ensure -> not? equal? [label: .attr: "a"] [.label: "a"]
    ensure -> not? equal? [label: .attr: "a"] [.attr: "a"]
    passed
    
]

; integer comparisons

print equal? 1 1
print 1=1
print equal? 1 2
print 1=2

print notEqual? 1 1
print 1<>1
print notEqual? 1 2
print 1<>2

print less? 1 1
print 1<1
print less? 1 2
print 1<2

print lessOrEqual? 1 1
print 1=<1
print lessOrEqual? 1 2
print 1=<2

print greater? 1 1
print 1>1
print greater? 2 1
print 2>1

print greaterOrEqual? 1 1
print 1>=1
print greaterOrEqual? 2 1
print 2>=1

; floating comparisons

print 3.0>2
print 1.123 < 1.023

; floating-integer comparisons

print 3.0=3
print 3.0>2
print 2<3.14

; other types

print "done"="done"
str: "hello"
print "hello"=str
print "boom"<>str

print "hello">"iceland"
print "hello"="iceland"
print "hello"<"iceland"

print [1 2 3]=[1 2 3]
print [1 2 3]=[4 5 6]

print [1 2 3 4]>[1 2 3]

a: to :date .format: "YYYY" "2002"
b: to :date .format: "YYYY" "2002"
print a = b
print b = a

a: to :date .format: "YYYY" "2002"
b: to :date .format: "YYYY" "2001"
print a > b
print a < b

a: to :date .format: "MMM dd" "Jan 15"
b: to :date .format: "MMM dd" "Jan 14"
print a > b
print a < b

a: to :date .format: "HH:mm" "13:25"
b: to :date .format: "HH:mm" "12:12"
print a > b
print a < b
