;; Library: Files -- https://arturo-lang.io/documentation/library/files/
;;
;; This file tests Arturo's Files Library
;; for obvious reasons, bash is used as helper to this,
;; doing functions independents of each other.


topic: $[topic :string] [
    print ""
    print ~">> |topic|"
    print ""
]

inspect: $[T][
    print T
    print type T
]

createTempFolder: $[][
    write.directory "temp/" null
    print "Created: temp/"
]

createTestFolder: $[topic][
    write.directory ~"temp/|topic|" null
    return ~"temp/|topic|"
]

deleteTestFolder: $[][
    delete.directory "temp/"
    print "Removed: temp/"
]


createTempFolder

; ---------------------------- Functions ----------------------------

; -- Test: copy

topic "copy"
do [

    dir: createTestFolder "copy"

    write ~"|dir|/file.txt" "Hello, world!"

    ; action
    copy ~"|dir|/file.txt" ~"|dir|/copied.txt"

    ; assertion
    list ~"|dir|"
    if every? ["file", "copied"] 'file -> exists? ~"|dir|/|file|.txt"
    -> print "copy is working well!"

]


topic "copy.directory - with empty folders"
do [

    dir: createTestFolder "copy-empty-dir"

    folders: @["A" "B" "C"]
    loop folders 'f -> write.directory ~"|dir|/input/|f|" null
    write.directory ~"|dir|/dest" null

    ; action
    copy.directory ~"|dir|/input" ~"|dir|/dest"

    ; assertion
    if every? folders 'f -> exists?.directory ~"|dir|/dest/|f|"
    -> print "copy empty directory is working well!"

]

topic "copy.directory - with filled folders"
do [

    dir: createTestFolder "copy-filled-dir"

    folders: @["A" "B" "C"]
    loop folders 'f -> write.directory ~"|dir|/input/|f|" null
    loop folders 'f -> write ~"|dir|/input/|f|/file.txt" "."
    write.directory ~"|dir|/dest" null

    ; action
    copy.directory ~"|dir|/input" ~"|dir|/dest"

    ; assertion
    if every? folders 'f -> exists? ~"|dir|/dest/|f|/file.txt"
    -> print "copy filled directory is working well!"

]


; -- Test: delete

topic "delete"
do [

    dir: createTestFolder "delete"

    write ~"|dir|/file.txt" "Hello, world!"

    if exists? ~"|dir|/file.txt"
    -> print "exists"

    delete ~"|dir|/file.txt"

    if not? exists? ~"|dir|/file.txt"
    -> print "deleted"

]

topic "delete.directory - with empty folders"
do [

    dir: createTestFolder "delete-empty-folders"

    folders: @["A" "B" "C"]
    loop folders 'f -> write.directory ~"|dir|/|f|" null

    if every? folders 'f -> exists?.directory ~"|dir|/|f|"
    -> print "directories created!"

    ; action
    loop folders 'f -> delete.directory ~"|dir|/|f|"
    if every? folders 'f -> not? exists?.directory ~"|dir|/|f|"
    -> print "directories deleted!"

]

topic "delete.directory - with filled folders"
do [

    dir: createTestFolder "delete-filled-dir"

    folders: @["A" "B" "C"]
    loop folders 'f -> write.directory ~"|dir|/|f|" null
    loop folders 'f -> write ~"|dir|/|f|/file.txt" "."

    if every? folders 'f -> exists? ~"|dir|/|f|/file.txt"
    -> print "directories & files created!"

    loop folders 'f -> delete.directory ~"|dir|/|f|"

    if every? folders 'f -> not? exists? ~"|dir|/|f|/file.txt"
    -> print "directories & files deleted!"

]

; -- Test: move

topic "move"
do [

    dir: createTestFolder "move"

    write.directory ~"|dir|/dest" null
    write ~"|dir|/file.txt" "Hello, world!"

    ensure -> exists? ~"|dir|/file.txt"
    ensure -> not? exists? ~"|dir|/dest/file.txt"

    ; action
    move ~"|dir|/file.txt" ~"|dir|/dest/file.txt"

    ; assertion
    if and?
        not? exists? ~"|dir|/file.txt"
        exists? ~"|dir|/dest/file.txt"
    -> print "file.txt moved to dest/"

]

topic "move.directory - with empty folders"
do [

    dir: createTestFolder "move-empty-dir"

    folders: @["A" "B" "C"]
    loop folders 'f -> write.directory ~"|dir|/input/|f|" null
    write.directory ~"|dir|/dest" null

    ensure -> every? folders 'f
    -> and?
        exists?.directory ~"|dir|/input/|f|"
        not? exists?.directory ~"|dir|/dest/|f|"

    print "empty folders created inside input/"

    ; action
    move.directory ~"|dir|/input" ~"|dir|/dest"

    ; assertion
    ensure -> not? exists?.directory ~"|dir|/input"
    ensure -> every? folders 'f
    -> exists?.directory ~"|dir|/dest/|f|"

    print "empty folders moved to dest/"

]


topic "move.directory - with filled folders"
do [

    dir: createTestFolder "move-filled-dir"

    folders: @["A" "B" "C"]
    loop folders 'f -> write.directory ~"|dir|/input/|f|" null
    loop folders 'f -> write ~"|dir|/input/|f|/file.txt" "."
    write.directory ~"|dir|/dest" null

    print "filled folders created inside input/"

    ; action
    move.directory ~"|dir|/input" ~"|dir|/dest"

    ; assertion
    ensure -> not? exists?.directory ~"|dir|/input"
    ensure -> every? folders 'f
    -> exists? ~"|dir|/dest/|f|/file.txt"

    print "filled folders moved to dest/"

]


; -- Test: permissions

topic "permissions"
do [

    ; preparing
    ; Using write because I can't redirect using `execute` function
    write "temp/file.txt" "Hello, world!"

    ; action & assertion
    inspect permissions "temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]


;; Returns me a `SIGSEGV: Illegal storage access. (Attempt to read from nil?)`
; topic "permissions.set"
; do [
;
;     ; preparing
;     ; Using write because I can't redirect using `execute` function
;     write "temp/file.txt" "Hello, world!"
;
;     ; action
;     permissions.set: #[others:#[write:false]] "temp/file.txt"
;
;     ; assertion
;     inspect permissions "temp/file.txt"
;
;     ; cleaning
;     execute "rm temp/* --recursive"
;
; ]

; -- Test: read

topic "read"
do [

    ; preparing
    write "temp/test.txt" {
        Hello, world
        This is a multiline File.
        :)
    }

    ; action & assertion
    a: read "temp/test.txt"
    inspect a
    print a

    ; cleaning
    execute "rm temp/* --recursive"

]


topic "read.lines"
do [

    ; preparing
    write "temp/test.txt" {
        The Language
        ------------------------------

        Arturo is an independently-developed, modern programming language,
        vaguely related to various other ones - including but not limited to:
        Logo, Rebol, Forth, Ruby, Haskell, D, Smalltalk, Tcl, and Lisp.

        The language has been designed
        following some very simple and straightforward principles:

        - Code is just a list of words, symbols and literal values
        - Words and symbols within a block are interpreted - when needed -
            according to the context
        - No reserved words or keywords -
            look for them as hard as you can; there are absolutely none
    }

    ; action & assertion
    inspect read.lines "temp/test.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.json"
do [

    ; preparing
    write "temp/test.json" {
        {
            "name": "Arturo",
            "version": "0.9.83",
            "build": "b/12",
            "platform": "amd/win10"
        }
    }

    ; action & assertion
    a: read.json "temp/test.json"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.csv"
do [

    ; preparing
    write "temp/test.csv" {
        language; version; platform
        Arturo; 0.9.83; win10
        Python; 3.9; gnu/linux
        Ruby; 3.2.1; macOS
    }

    ; action & assertion
    a: read.csv "temp/test.csv"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.csv.withHeaders"
do [

    ; preparing
    write "temp/test.csv" {
        language; version; platform
        Arturo; 0.9.83; win10
        Python; 3.9; gnu/linux
        Ruby; 3.2.1; macOS
    }

    ; action & assertion
    a: read.csv.withHeaders "temp/test.csv"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.html"
do [

    ; preparing
    write "temp/test.html" {
        <!DOCTYPE html>
        <html>
        <body>
            <h2>Unordered List with Square Bullets</h2>
            <ul style="list-style-type:square;">
                <li>Arturo</li>
                <li>Python</li>
                <li>Ruby</li>
            </ul>
            <p>
                Hello
                <br>
                World
            </p>
        </body>
        </html>
    }

    ; action & assertion
    a: read.html "temp/test.html"
    print a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.xml"
do [

    ; preparing
    write "temp/test.xml" {
        <?xml version="1.0"?>
        <languages>
        <language id="art">
            <name>Arturo Programming Language</name>
            <author>Yanis Zafiropulos</author>
            <category>Scripting and Concatenative</category>
        </language>
        <language id="py">
            <name>CPython</name>
            <author>Guido van Rossum</author>
            <category>Scripting and Object Oriented</category>
        </language>
        <language id="rb">
            <name>Ruby</name>
            <author>Yukihiro Matsumoto</author>
            <category>Scripting and Object Oriented</category>
        </language>
        </languages>
    }

    ; action & assertion
    a: read.xml "temp/test.xml"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.markdown"
do [

    ; preparing
    write "temp/test.markdown" {
        # Arturo Basics

        > Arturo is a very simple language.
        > Even without any prior experience,
        > I estimate it would take you roughly half an hour
        > before you are comfortable enough to write your first program.

        ---

        - [Library](https://arturo-lang.io/documentation/library)
        - [Examples](https://arturo-lang.io/documentation/examples)

        ## First Steps
        1. [Main Components](https://arturo-lang.io/documentation/language/#the-main-components)
        2. [Precedence & Evaluation](https://arturo-lang.io/documentation/language/#precedence-and-evaluation)
        3. [Scope & Rules](https://arturo-lang.io/documentation/language/#scope-and-rules)

    }

    ; action & assertion
    a: read.markdown "temp/test.markdown"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.toml"
do [

    ; preparing
    write "temp/test.toml" {
        [arturo.package]
        name = "TOML Reader"
        description = "Yet another TOML Reader"
        version = "1.0.1"
        authors = ["author A", "author B"]
        license = "MIT"

        [arturo.config]
        version = "^0.9"
        pkg-manager = "^0.2"
    }

    ; action & assertion
    a: read.toml "temp/test.toml"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.toml -- from ini file"
do [

    ; preparing
    write "temp/test.ini" {
        [package]
        name = "TOML Reader"
        description = "Yet another TOML Reader"
        version = "1.0.1"
        authors = ["author A", "author B"]
        license = "MIT"

        [config]
        version = "^0.9"
        pkg-manager = "^0.2"
    }

    ; action & assertion
    a: read.toml "temp/test.ini"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

;; Commented code because, can't delete "hello.art.bcode", what breaks other tests
;; BTW, read.bytecode is working well
; topic "read.bytecode"
; do [
;
;     ; preparing
;     write "temp/hello.art" {
;         print "Hello, world!"
;     }
;
;     execute "arturo -c temp/hello.art"
;     print execute "ls temp/"
;
;     ; action & assertion
;     inspect read.bytecode "temp/hello.art.bcode"
;
;     ; cleaning
;     execute "rm temp/* --recursive --force"
;
; ]

topic "read.binary"
do [

    ; preparing
    write "temp/test.bin" {
        Hello, World!
    }

    ; action & assertion
    a: read.binary "temp/test.bin"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.file"
do [

    ; action & assertion

    inspect read "temp/test.bin"
    ; temp/test.bin :string
    try? -> inspect read.file "temp/test.bin"
    else -> print "error raised!"
    ; >> Runtime | File: lib.files.art
    ; error | Line: 578
    ;       |
    ;       | file not found: temp/test.bin

    ; cleaning
    execute "rm temp/* --recursive"

]

; -- Test: rename

topic "rename"
do [

    ; preparing
    ; Using write because I can't redirect using `execute` function
    write "temp/file.txt" "Hello, world!"

    ; action
    rename "temp/file.txt" "temp/renamed.txt"

    ; assertion
    print execute "cat temp/renamed.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "rename.directory"
do [

    ; preparing
    ; Using write because I can't redirect using `execute` function
    execute "mkdir temp/folder"

    ; action
    print execute "ls temp"
    rename.directory "temp/folder" "temp/directory"

    ; assertion
    print execute "ls temp"

    ; cleaning
    execute "rm temp/* --recursive"

]

; ; -- Test: symlink

;; How can I properly test it?
; topic "rename.directory"
; do [
;
;     ; cleaning
;     execute "rm temp/* --recursive"
;
; ]

; -- Test: timestamp

topic "timestamp"
do [

    ; preparing
    ; Using write because I can't redirect using `execute` function
    write "temp/file.txt" "Hello, world!"

    ; action & assertion
    a: timestamp "temp/file.txt"
    ensure -> a\created
    ensure -> a\accessed
    ensure -> a\modified
    print "assertions passed"

    ; cleaning
    execute "rm temp/* --recursive"

]

; -- Test: zip & unzip

topic "zip & unzip"
do [

    print execute "ls temp/"
    print "---"
    zip "temp/dest.zip" ["README.md"]
    print execute "ls temp/*"
    print "---"
    unzip "temp/README.md" "temp/dest.zip"
    print execute "ls temp/*"

    ; cleaning
    execute "rm temp/*.zip --recursive"
    execute "rm temp/* --recursive"

]

;; Zip is not working for folders
; topic "zip & unzip -- wit folders"
; do [
;     ; preparing
;     execute "mkdir temp/folder{A,B,C}"
;     execute "mkdir temp/folder{A,B,C}/{A,B,C}"
;
;     ; Using write because I can't redirect using `execute` function
;     write "temp/folderA/A/file.txt" "Hello, world!"
;     write "temp/folderB/B/file.txt" "Hello, world!"
;     write "temp/folderC/C/file.txt" "Hello, world!"
;     write "temp/folderA/file.txt" "Hello, world!"
;     write "temp/file.txt" "Hello, world!"
;
;     ; 1st assertion
;     print execute "ls temp/**"
;
;     ; zip's assertion
;     print "Zipping..."
;     zip "temp/dest.zip" ["temp/file.txt" "temp/folderA" "temp/folderB" "temp/folderC"]
;     print execute "ls temp/**"
;
;     ; unzip's assertion
;     print "Unzipping..."
;     unzip "temp/" "temp/dest.zip"
;     print execute "ls temp/**"
;
;     ; cleaning
;     execute "rm temp/* --recursive"
; ]


; -- Test: volume

topic "volume"
do [

    ; preparing
    write "temp/test.bin" "Hello, World!"

    ; action & assertion
    print volume "temp/test.bin"

    ; cleaning
    execute "rm temp/* --recursive"

]

; -- Test: write

topic "write"
do [

    ; action
    write "temp/file.txt" "Hello, world!"

    ; assertion
    print execute "cat temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "write.append"
do [

    ; action
    write "temp/file.txt" "Hello, world!"
    write.append "temp/file.txt" "\nFrom Arturo's World!"

    ; assertion
    print execute "cat temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "write.directory"
do [

    ; action
    write.directory "temp/folder" null
    write.directory "temp/directory" null

    ; assertion
    print execute "ls temp/"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "write.json"
do [

    ; action
    write.json "temp/file.txt" #[
        name: "Arturo",
        version: 1.9.83,
        build: "b/12",
        platform: "amd/win10"
    ]

    ; assertion
    print execute "cat temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]


topic "write.json.compact"
do [

    ; action
    write.json.compact "temp/file.txt" #[
        name: "Arturo",
        version: 1.9.83,
        build: "b/12",
        platform: "amd/win10"
    ]

    ; assertion
    print execute "cat temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "write.binary"
do [

    ; action
    write "temp/file.bin" "Hello, world!"

    ; assertion
    print execute "cat temp/file.bin"

    ; cleaning
    execute "rm temp/* --recursive"

]


; -- Test: exists?

topic "exists?"
do [

    if not? exists? "temp/file.txt" [
        print "file does not exist"
    ]

    ; Using write because I can't redirect using `execute` function
    write "temp/file.txt" "Hello, world!"

    if exists? "temp/file.txt" [
        print "file exists"
    ]

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "exists?.directory"
do [

    if not? exists?.directory "temp/dir" [
        print "directory does not exist"
    ]

    ; Using write because I can't redirect using `execute` function
    execute "mkdir temp/dir"

    if exists?.directory "temp/dir" [
        print "directory exists"
    ]

    ; cleaning
    execute "rm temp/* --recursive"

]

; -- hidden?

topic "hidden?"
do [

    print hidden? "README.md"
    print hidden? "src"
    print hidden? ".gitignore"
    print hidden? ".cache"
    print hidden? ".github"
    print hidden? ".git"

    ; cleaning
    execute "rm temp/* --recursive"

]


; ---- Finish
deleteTestFolder
