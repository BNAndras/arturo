;; Library: Files -- https://arturo-lang.io/documentation/library/files/
;;
;; This file tests Arturo's Files Library
;; for obvious reasons, bash is used as helper to this,
;; doing functions independents of each other.


topic: $[topic :string] [
    print ""
    print ~">> |topic|"
    print ""
]

execute "mkdir temp"
print "Created: temp/"

; ---------------------------- Functions ----------------------------

; -- Test: copy

topic "copy"
do [

    ; preparing
    execute "mkdir temp/toCopy"
    ; Using write because I can't redirect using `execute` function
    write "temp/toCopy/file.txt" "Hello, world!"

    ; action
    copy "temp/toCopy/file.txt" "temp/copied.txt"

    ; assertion
    print execute "cat temp/copied.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]


topic "copy.directory - with empty folders"
do [

    ; preparing
    execute "mkdir temp/toCopy"
    execute "mkdir temp/toCopy/folder{A,B,C}"
    execute "mkdir temp/toCopy/folder{A,B,C}/{A,B,C}"
    execute "mkdir temp/dest"

    ; action
    copy.directory "temp/toCopy/" "temp/dest"

    ; assertion
    print execute "ls temp/dest/**"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "copy.directory - with mixed folders"
do [

    ; preparing

    execute "mkdir temp/toCopy"
    execute "mkdir temp/toCopy/folder{A,B,C}"
    execute "mkdir temp/toCopy/folder{A,B,C}/{A,B,C}"

    write "temp/toCopy/folderA/A/file.txt" "Hello, world!"
    write "temp/toCopy/folderB/B/file.txt" "Hello, world!"
    write "temp/toCopy/folderC/C/file.txt" "Hello, world!"
    write "temp/toCopy/folderA/file.txt" "Hello, world!"
    write "temp/toCopy/file.txt" "Hello, world!"

    execute "mkdir temp/dest"

    ; action
    copy.directory "temp/toCopy/" "temp/dest"

    ; assertion
    print execute "ls temp/dest/** --recursive"

    ; cleaning
    execute "rm temp/* --recursive"

]


; -- Test: delete

topic "delete"
do [

    ; preparing
    ; Using write because I can't redirect using `execute` function
    write "temp/file.txt" "Hello, world!"

    ; 1st assertion
    print execute "cat temp/file.txt"

    ; action
    print "deleting..."
    delete "temp/file.txt"

    ; 2nd assertion
    print execute "cat temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "delete.directory - with empty folders"
do [

    ; preparing
    execute "mkdir temp/folder{A,B,C}"
    execute "mkdir temp/folder{A,B,C}/{A,B,C}"

    ; assertion
    print execute "ls temp/**"

    ; action
    print "Deleting..."
    delete.directory "temp/folderA"
    delete.directory "temp/folderB"
    delete.directory "temp/folderC"

    ; assertion
    print ["now:" execute "ls temp"]

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "delete.directory - with mixed folders"
do [

    ; preparing

    execute "mkdir temp/folder{A,B,C}"
    execute "mkdir temp/folder{A,B,C}/{A,B,C}"

    ; Using write because I can't redirect using `execute` function
    write "temp/folderA/A/file.txt" "Hello, world!"
    write "temp/folderB/B/file.txt" "Hello, world!"
    write "temp/folderC/C/file.txt" "Hello, world!"
    write "temp/folderA/file.txt" "Hello, world!"
    write "temp/file.txt" "Hello, world!"

    ; 1st assertion
    print execute "ls temp/**"

    ; action
    print "Deleting..."

    delete.directory "temp/folderA"
    delete.directory "temp/folderB"
    delete.directory "temp/folderC"
    delete "file.txt"

    ; 2nd assertion
    print execute "ls temp/**"

    ; cleaning
    execute "rm temp/* --recursive"

]

; -- Test: move

topic "move"
do [

    ; preparing
    execute "mkdir temp/toMove"
    ; Using write because I can't redirect using `execute` function
    write "temp/toMove/file.txt" "Hello, world!"

    ; action
    move "temp/toMove/file.txt" "temp/moved.txt"

    ; assertion
    print execute "cat temp/moved.txt"
    print execute "cat temp/toMove/moved.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]



topic "move.directory - with empty folders"
do [

    ; preparing
    execute "mkdir temp/toMove"
    execute "mkdir temp/toMove/folder{A,B,C}"
    execute "mkdir temp/toMove/folder{A,B,C}/{A,B,C}"
    execute "mkdir temp/dest"

    ; action
    move.directory "temp/toMove/" "temp/dest"

    ; assertion
    print execute "ls temp/dest/**"
    print execute "ls temp/toMove/**"

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "move.directory - with mixed folders"
do [

    ; preparing

    execute "mkdir temp/toMove"
    execute "mkdir temp/toMove/folder{A,B,C}"
    execute "mkdir temp/toMove/folder{A,B,C}/{A,B,C}"

    write "temp/toMove/folderA/A/file.txt" "Hello, world!"
    write "temp/toMove/folderB/B/file.txt" "Hello, world!"
    write "temp/toMove/folderC/C/file.txt" "Hello, world!"
    write "temp/toMove/folderA/file.txt" "Hello, world!"
    write "temp/toMove/file.txt" "Hello, world!"

    execute "mkdir temp/dest"

    ; action
    move.directory "temp/toMove/" "temp/dest"

    ; assertion
    print execute "ls temp/dest/** --recursive"

    ; cleaning
    execute "rm temp/* --recursive"

]


; -- Test: permissions

topic "permissions"
do [

    ; preparing
    ; Using write because I can't redirect using `execute` function
    write "temp/file.txt" "Hello, world!"

    ; action & assertion
    inspect permissions "temp/file.txt"

    ; cleaning
    execute "rm temp/* --recursive"

]


;; Returns me a `SIGSEGV: Illegal storage access. (Attempt to read from nil?)`
; topic "permissions.set"
; do [
;
;     ; preparing
;     ; Using write because I can't redirect using `execute` function
;     write "temp/file.txt" "Hello, world!"
;
;     ; action
;     permissions.set: #[others:#[write:false]] "temp/file.txt"
;
;     ; assertion
;     inspect permissions "temp/file.txt"
;
;     ; cleaning
;     execute "rm temp/* --recursive"
;
; ]

; -- Test: read

topic "read"
do [

    ; preparing
    write "temp/test.txt" {
        Hello, world
        This is a multiline File.
        :)
    }

    ; action & assertion
    a: read "temp/test.txt"
    inspect a
    print a

    ; cleaning
    execute "rm temp/* --recursive"

]


;; What is the difference between `read` and `read.lines`?
topic "read.lines"
do [

    ; preparing
    write "temp/test.txt" {
        Hello, world
        This is a multiline File.
        :)
    }

    ; action & assertion
    a: read "temp/test.txt"
    inspect a
    print a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.json"
do [

    ; preparing
    write "temp/test.json" {
        {
            "name": "Arturo",
            "version": "0.9.83",
            "build": "b/12",
            "platform": "amd/win10"
        }
    }

    ; action & assertion
    a: read.json "temp/test.json"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.csv"
do [

    ; preparing
    write "temp/test.csv" {
        language; version; platform
        Arturo; 0.9.83; win10
        Python; 3.9; gnu/linux
        Ruby; 3.2.1; macOS
    }

    ; action & assertion
    a: read.csv "temp/test.csv"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

topic "read.csv.withHeaders"
do [

    ; preparing
    write "temp/test.csv" {
        language; version; platform
        Arturo; 0.9.83; win10
        Python; 3.9; gnu/linux
        Ruby; 3.2.1; macOS
    }

    ; action & assertion
    a: read.csv.withHeaders "temp/test.csv"
    inspect a

    ; cleaning
    execute "rm temp/* --recursive"

]

; -- Test: rename

; -- Test: symlink

; -- Test: timestamp

; -- Test: unzip

; -- Test: volume

; -- Test: write

; -- Test: zip

; -- exists?

; -- hidden?


; ---- Finish
execute "rmdir temp"
