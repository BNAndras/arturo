topic: $[topic :string] -> print ~"\n>> |topic|"
passed: $[] -> print "[+] passed!"

topic « ceil
do [
    
    ensure.that: "works with :floating"          -> 3       = ceil 2.1                    
    ensure.that: "works with :floating"          -> 3       = ceil 2.9                    
    ensure.that: "works with negative :floating" -> (neg 3) = ceil neg 3.5
    passed
                   
    ensure.that: "works with :integer"          -> 4       = ceil 4
    ensure.that: "works with negative :integer" -> (neg 4) = ceil neg 4
    passed
                        
    ensure.that: "works with :rational"
        -> 4 = ceil to :rational @[7 2]
    ensure.that: "works with negative :rational" 
        -> (neg 3) = ceil to :rational @[neg 7 2]
    passed
    
    ensure.that: "always returns :integer" -> every? @[
        ceil 2.1
        ceil 2.9
        ceil 3.5
        ceil neg 3.5
        ceil 4
        ceil neg 4
        ceil to :rational @[7 2]
        ceil to :rational @[neg 7 2]
    ] => integer? 
    passed
    
]

topic « clamp
do [
    
    ensure -> 1 = clamp 1 0..2
    ensure -> 1 = clamp 1 2..0
    passed
    
    ensure -> 1.5 = clamp 1.5 0..2
    ensure -> 1.5 = clamp 1.5 2..0
    passed
    
    ensure -> 1 = clamp 2 0..1
    ensure -> 1 = clamp 2 1..0
    passed
    
    ensure -> 1 = clamp 2.5 0..1
    ensure -> 1 = clamp 2.5 1..0
    passed
    
    ensure -> 1 = clamp 0 1..2
    ensure -> 1 = clamp 0 2..1
    passed
   
    ensure -> 1 = clamp 0.5 1..2
    ensure -> 1 = clamp 0.5 2..1
    passed
    
    ensure -> 4 = clamp 5 range.step: 2 0 5
    ensure -> 5 = clamp 5 range.step: 2 5 0
    ensure -> 3 = clamp 1 range.step: 2 5 2
    passed
    
    ensure -> 4 = clamp 5.5 range.step: 2 0 5
    ensure -> 5 = clamp 5.5 range.step: 2 5 0
    ensure -> 3 = clamp 1.2 range.step: 2 5 2
    passed
    
    ensure -> every? @[
        -> clamp 2 `a`..`d`
        -> clamp `b` `a`..`c`
    ] => throws?
    passed
    
    ensure.that: 
    "returns :integer for :integer parameter" 
    -> true
    loop @[
        clamp 5 0..10    
        clamp 5 6..10    
        clamp 5 0..4      
    ] => integer?
    passed
    
    ensure.that: 
    "returns :integer for :floating parameter that is outside the range" 
    -> true
    loop @[  
        clamp 5.0 6..10    
        clamp 5.0 0..4       
        clamp 5.5 6..10    
        clamp 5.5 0..4      
    ] => integer?
    passed

    ensure.that: 
    "returns :floating for :floating parameter that is already within the rang" 
    -> every? @[
        clamp 5.0 0..10    
        clamp 5.5 0..10 
    ] => floating?
    passed
    
]

topic « floor
do [
    
    ensure.that: "works with :floating"          -> 2       = floor 2.1                    
    ensure.that: "works with :floating"          -> 2       = floor 2.9                    
    ensure.that: "works with negative :floating" -> (neg 4) = floor neg 3.5
    passed
                   
    ensure.that: "works with :integer"          -> 4       = floor 4
    ensure.that: "works with negative :integer" -> (neg 4) = floor neg 4
    passed
                        
    ensure.that: "works with :rational"
        -> 3 = floor to :rational @[7 2]
    ensure.that: "works with negative :rational" 
        -> (neg 4) = floor to :rational @[neg 7 2]
    passed
    
    ensure.that: "always returns :integer" -> every? @[
        floor 2.1
        floor 2.9
        floor 3.5
        floor neg 3.5
        floor 4
        floor neg 4
        floor to :rational @[7 2]
        floor to :rational @[neg 7 2]
    ] => integer? 
    passed
    
]


topic « round
do [
    
    ensure.that: "works with :floating"          -> 2.0       = round 2.1                    
    ensure.that: "works with :floating"          -> 3.0       = round 2.9                    
    ensure.that: "works with negative :floating" -> (neg 4.0) = round neg 3.5
    passed
                   
    ensure.that: "works with :integer"          -> 4       = round 4
    ensure.that: "works with negative :integer" -> (neg 4) = round neg 4
    passed

    ensure.that: "works with :rational" -> 4       = round to :rational @[7 2]
    ensure.that: "works with :rational" -> 3       = round to :rational @[29 10]
    ensure.that: "works with :rational" -> 2       = round to :rational @[21 10]
    ensure.that: "works with :rational" -> (neg 4) = round to :rational @[neg 7 2]
    ensure.that: "works with :rational" -> (neg 3) = round to :rational @[neg 29 10]
    ensure.that: "works with :rational" -> (neg 2) = round to :rational @[neg 21 10]
    passed
    
    ensure.that: "always returns :floating" -> every? @[
        round 2.1
        round 2.9
        round 3.5
        round neg 3.5
        round 4
        round neg 4
        round to :rational @[7 2]
        round to :rational @[neg 7 2]
        round to :rational @[29 10]
        round to :rational @[neg 29 10]
        round to :rational @[21 10]
        round to :rational @[neg 21 10]
    ] => floating? 
    passed
    
]
