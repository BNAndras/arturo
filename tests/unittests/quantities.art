
topic:  $[topic :string] -> print ~"\n>> |topic|"
passed: $[] -> print "[+] passed!"


topic « currencies
do [
    
    
    topic « currencies - currency? (hidden)
    
    ; This test is hidden since it takes a lot of time to execute
    ; You can test it manually if you want to
    
    ; ensure -> every? [
    ;     1`AED 1`ALL 1`ARS 1`AUD 1`BGN 1`BHD 1`BNB 1`BND 1`BOB 1`BRL 1`BTC 1`BWP 
    ;     1`CAD 1`CHF 1`CLP 1`CNY 1`COP 1`CRC 1`CZK 1`DKK 1`DOP 1`DZD 1`EGP 1`ETB 
    ;     1`ETH 1`EUR 1`FJD 1`GBP 1`HKD 1`HNL 1`HRK 1`HUF 1`IDR 1`ILS 1`INR 1`IRR 
    ;     1`ISK 1`JMD 1`JOD 1`JPY 1`KES 1`KRW 1`KWD 1`KYD 1`KZT 1`LBP 1`LKR 1`MAD 
    ;     1`MDL 1`MKD 1`MXN 1`MUR 1`MYR 1`NAD 1`NGN 1`NIO 1`NOK 1`NPR 1`NZD 1`OMR 
    ;     1`PAB 1`PEN 1`PGK 1`PHP 1`PKR 1`PLN 1`PYG 1`QAR 1`RON 1`RSD 1`RUB 1`SAR 
    ;     1`SCR 1`SEK 1`SGD 1`SLL 1`SOS 1`SVC 1`THB 1`TND 1`TRY 1`TTD 1`TWD 1`TZS 
    ;     1`UAH 1`UGX 1`UYU 1`UZS 1`VES 1`VND 1`XAF 1`XAG 1`XAU 1`XOF 1`YER 1`ZAR 
    ;     1`ZMW
    ; ] => currency?
    ; passed
    
    topic « currencies - basic math
    
    data: [ 
        200`EUR 300`EUR 100`EUR 400`EUR 
        200`USD 300`USD 100`USD 400`USD 
        200`BRL 300`BRL 100`BRL 400`BRL 
    ]
    
    loop data [ res res2 a b ][
        ensure -> res  = a + a
        ensure -> res2 = b - a
        ensure -> res  = a * 2
        ensure -> res  = b / 2
        ensure -> res  = b // 2
        passed
    ]
    
    topic « currencies - conforms?
    
    ensure -> conforms? 100`EUR 200`USD
    ensure -> conforms? 100`EUR 100`USD
    ensure -> conforms? 100`EUR 100`EUR
    ensure -> 100`EUR := 200`USD
    ensure -> 100`EUR := 100`USD
    ensure -> 100`EUR := 100`EUR
    passed
    
    ensure -> not? conforms? 100`EUR 100`m
    ensure -> not? conforms? 100`EUR 100`m/s
    passed
    
    topic « currencies - property
    
    ensure -> 'currency = property 100`EUR
    ensure -> 'currency = property 100`USD
    ensure -> 'currency = property 100`BRL
    passed
    
    ensure -> 'currency <> property 100`m
    ensure -> 'currency <> property 100`m/s
    passed
    
    topic « currencies - scalar
    
    ensure -> 200 = scalar 200`USD
    ensure -> 100 = scalar 100`USD
    ensure -> 100 = scalar 100`EUR
    passed
    
    topic « currencies - specify
    
    specify.symbol: "ÁRT" .describes: "arturoCrypto" 'artc 10`EUR
    
    ensure -> 'arturocrypto = property 1`artc
    ensure -> "1.00 ÁRT" = ~"|1`artc|"
    ensure -> "31:2`ÁRT" = as.code 15.5`artc
    ensure -> 10`EUR = 1`artc --> `EUR
    passed
    
    topic « currencies - units (disabled)
    
    ; ensure -> `EUR = units 100`EUR
    ; ensure -> `USD = units 100`USD
    ; ensure -> `AUD = units 100`AUD
    ; passed
    
    ; ensure -> `AUD <> units 100`BRL
    ; passed 
    
    
]


topic « length
do [
    
    topic « length - length?
    
    ensure -> every? [
        1`m 1`am 1`fm 1`pm 1`nm 1`um 1`mm 1`cm 1`dm 1`hm 1`km 1`Mm 
        1`Gm 1`Tm 1`Pm 1`Em
        
        1`in 1`ft 1`yd 1`ftm 1`rod 1`mi 1`fur 1`nmi 1`ang 1`au 1`ly

        1`px 1`apx 1`fpx 1`ppx 1`npx 1`upx 1`mpx 1`cpx 1`dpx 1`hpx 
        1`kpx 1`Mpx 1`Gpx 1`Tpx 1`Ppx 1`Epx

        1`pt 1`apt 1`fpt 1`ppt 1`npt 1`upt 1`mpt 1`cpt 1`dpt 1`hpt 
        1`kpt 1`Mpt 1`Gpt 1`Tpt 1`Ppt 1`Ept

        1`pc 1`apc 1`fpc 1`ppc 1`npc 1`upc 1`mpc 1`cpc 1`dpc 1`hpc 
        1`kpc 1`Mpc 1`Gpc 1`Tpc 1`Ppc 1`Epc
    ] => length?
    passed
    
    topic « length - basic math
    
    ; :unit :scale
    
    ensure -> 3`m   = 2`m + 1
    ensure -> 3.5`m = 2`m + 1.5
    ensure -> 7.5`m = 5`m + 5:2
    passed
    
    ensure -> 1`m   = 2`m - 1
    ensure -> 0.5`m = 2`m - 1.5
    ensure -> 4.5`m = 5`m - 1:2
    passed
    
    ; ensure -> 7`m = 15`m / 2
    ensure -> 7.5`m = 15`m // 2
    passed
    
    ensure -> 2`m    = 1`m + 1`m
    ensure -> 0`m    = 1`m - 1`m
    passed
    
    ensure -> 1.01`m = 1`m + 1`cm
    ensure -> 0.99`m = 1`m - 1`cm
    passed
    
    
    topic « length - math // scales
    
    ensure -> 1`Em  = 1`m * (10 ^ 18)
    ensure -> 1`Pm  = 1`m * (10 ^ 15)
    ensure -> 1`Tm  = 1`m * (10 ^ 12)
    ensure -> 1`Gm  = 1`m * (10 ^ 9)
    ensure -> 1`Mm  = 1`m * (10 ^ 6)
    ensure -> 1`km  = 1`m * (10 ^ 3)
    ensure -> 1`hm  = 1`m * (10 ^ 2)
    ensure -> 1`dam = 1`m * (10 ^ 1)
    ensure -> 1`dm  = 1`m * (10 ^ (neg 1 ))
    ensure -> 1`cm  = 1`m * (10 ^ (neg 2 ))
    ensure -> 1`mm  = 1`m * (10 ^ (neg 3 ))
    ensure -> 1`um  = 1`m * (10 ^ (neg 6 ))
    ensure -> 1`nm  = 1`m * (10 ^ (neg 9 ))
    ; ensure -> 1`pm  = 1`m * (10 ^ (neg 12))
    ; ensure -> 1`fm  = 1`m * (10 ^ (neg 15))
    ; ensure -> 1`am  = 1`m * (10 ^ (neg 18))
    passed
    
    ; ensure -> 1`Epx  = 1`px * (10 ^ 18)
    ensure -> 1`Ppx  = 1`px * (10 ^ 15)
    ensure -> 1`Tpx  = 1`px * (10 ^ 12)
    ensure -> 1`Gpx  = 1`px * (10 ^ 9)
    ensure -> 1`Mpx  = 1`px * (10 ^ 6)
    ensure -> 1`kpx  = 1`px * (10 ^ 3)
    ensure -> 1`hpx  = 1`px * (10 ^ 2)
    ensure -> 1`dapx = 1`px * (10 ^ 1)
    ensure -> 1`dpx  = 1`px * (10 ^ (neg 1 ))
    ensure -> 1`cpx  = 1`px * (10 ^ (neg 2 ))
    ensure -> 1`mpx  = 1`px * (10 ^ (neg 3 ))
    ensure -> 1`upx  = 1`px * (10 ^ (neg 6 ))
    ensure -> 1`npx  = 1`px * (10 ^ (neg 9 ))
    ; ensure -> 1`ppx  = 1`px * (10 ^ (neg 12))
    ; ensure -> 1`fpx  = 1`px * (10 ^ (neg 15))
    ; ensure -> 1`apx  = 1`px * (10 ^ (neg 18))
    passed
    
    ; ensure -> 1`Ept  = 1`pt * (10 ^ 18)
    ensure -> 1`Ppt  = 1`pt * (10 ^ 15)
    ensure -> 1`Tpt  = 1`pt * (10 ^ 12)
    ensure -> 1`Gpt  = 1`pt * (10 ^ 9)
    ensure -> 1`Mpt  = 1`pt * (10 ^ 6)
    ensure -> 1`kpt  = 1`pt * (10 ^ 3)
    ensure -> 1`hpt  = 1`pt * (10 ^ 2)
    ensure -> 1`dapt = 1`pt * (10 ^ 1)
    ensure -> 1`dpt  = 1`pt * (10 ^ (neg 1 ))
    ensure -> 1`cpt  = 1`pt * (10 ^ (neg 2 ))
    ensure -> 1`mpt  = 1`pt * (10 ^ (neg 3 ))
    ensure -> 1`upt  = 1`pt * (10 ^ (neg 6 ))
    ensure -> 1`npt  = 1`pt * (10 ^ (neg 9 ))
    ; ensure -> 1`ppt  = 1`pt * (10 ^ (neg 12))
    ; ensure -> 1`fpt  = 1`pt * (10 ^ (neg 15))
    ; ensure -> 1`apt  = 1`pt * (10 ^ (neg 18))
    passed
    
    ; ensure -> 1`Epc  = 1`pc * (10 ^ 18)
    ensure -> 1`Ppc  = 1`pc * (10 ^ 15)
    ensure -> 1`Tpc  = 1`pc * (10 ^ 12)
    ensure -> 1`Gpc  = 1`pc * (10 ^ 9)
    ensure -> 1`Mpc  = 1`pc * (10 ^ 6)
    ensure -> 1`kpc  = 1`pc * (10 ^ 3)
    ensure -> 1`hpc  = 1`pc * (10 ^ 2)
    ensure -> 1`dapc = 1`pc * (10 ^ 1)
    ensure -> 1`dpc  = 1`pc * (10 ^ (neg 1 ))
    ensure -> 1`cpc  = 1`pc * (10 ^ (neg 2 ))
    ensure -> 1`mpc  = 1`pc * (10 ^ (neg 3 ))
    ensure -> 1`upc  = 1`pc * (10 ^ (neg 6 ))
    ensure -> 1`npc  = 1`pc * (10 ^ (neg 9 ))
    ; ensure -> 1`ppc  = 1`pc * (10 ^ (neg 12))
    ; ensure -> 1`fpc  = 1`pc * (10 ^ (neg 15))
    ; ensure -> 1`apc  = 1`pc * (10 ^ (neg 18))
    passed
    
    topic « length - math // area
    
    topic « length - math // volume
    
    topic « length - conforms?
        
    topic « length - convert

    topic « length - in
    
    topic « length - property
    
    topic « length - scalar
    
    topic « length - specify
    
    topic « length - units (disabled)
    
    
]

; Length
print 3`m + 2`m
print 1`m + 2`yd
print in`cm 1`in

; Complicated metric operations
print 2`m * 3
print 2`m * 3`m
print 2`m * 3`m2
print 3`m2 * 2`m
print 3`m2 * 2
print 3`m3 * 2

print 9`m3 / 3
print 9`m3 / 3`m
print 9`m3 / 3`m2
print 9`m3 / 3`m3

print 3`m2 * 2`yd
print 45`yd2 / 3`m

; Pressure
print in`atm 1`bar

; Energy
print in`J 1`kJ
print in`kJ 1`J

; Power
print in`W 1`kW
print in`hp 1`W

; Force
print in`N 1`dyn

; Radioactivity
print in`Bq 1`Ci

; Angle
print in`deg 1`rad

; Speed
print in`kph 30`mps

; Weight
print in`g 1`kg
print in`g 1`oz

; Information
print in`bit 10`kB
print in`bit 10`KiB

; Time
print in`min 1`h
print in`min 1`day
print in`h 1`day

; Temperature
print in`oC 32`oF
print in`oC 95`oF
print in`K 40`oC
