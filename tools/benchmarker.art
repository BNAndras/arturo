canExecute?: function [scri][
    scr: extract.filename scri
    if sys\release='mini [
        if in? scr [
            "runtime.NumberOutOfPermittedRange"

            "branching"
            "sorting"

            "ackermann function"
            "arbitrary-precision integers - included"
            "curzon numbers"
            "iban"
            "integer overflow"
            "integer roots"
            "jacobsthal numbers"
            "long multiplication"
            "loops - continue"
            "lucas-lehmer test"
            "modular exponentation"
            "next special primes"
            "sorting algorithms - cycle sort"
            "sorting algorithms - pancake sort"
            "sylvester's sequence"
            "trigonometric functions"
            "ultra useful primes"
            "unicode strings"
            "wieferich primes"
            "xml - input"
        ] -> return false
    ]

    if sys\release='full [
        if in? scr [
            "runtime.IntegerOperationOverflow"
            "runtime.IntegerParsingOverflow"
        ] -> return false
    ]

    return true
]

Results: #[
    benchmarks: #[]
    total: 0.0
]

runSet: function [title,location][
    print "====================================================================="
    print (color #cyan.bold ~"  |title|") ++ pad "time" 65 - size title
    print "====================================================================="
    tests: sort select list relative location 'loc -> contains? loc ".res"
    success: 0

    loop tests 'test [
        script: replace test ".res" ".art"
        expected: split.lines strip read test

        if canExecute? script [
            prints pad.right ((color #magenta "\n- Running: ") ++ truncate.preserve extract.filename script 40) 71 
            result: benchmark.get [
                do.times:3 [
                    execute ~{arturo --no-color "|script|"}
                ]
            ]
            result: result / 3
            result: (to :string .format:".2f" to :floating result)

            prints result++"ms"

            result: to :floating result
            Results\benchmarks\[script]: result
            Results\total: Results\total + result
        ]
    ] 

    print "\n"
]

print color #green.bold "\n  Arturo"
print color #white.bold "  Unit Tester\n"
print color #gray ~"  Release: @|sys\release|\n"

runSet "Unit Tests" "../tests/unittests"
;runSet "Errors" "../tests/errors"
;runSet "Examples" "../examples/rosetta"

outFile: "benchmarks/" ++ (to :string now\day)++"-"++(to :string now\month)++"-"++(to :string now\year) ++ ".json"

write.directory "benchmarks" Ã¸
write.json outFile Results

;inspect Results