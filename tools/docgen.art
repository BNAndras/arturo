#!/usr/bin/env arturo

IndexTemplate: relative "wikidocs/index.template.md"
SidebarTemplate: relative "wikidocs/sidebar.template.md"
LibraryTemplate: relative "wikidocs/library.template.md"
FunctionTemplate: relative "wikidocs/function.template.md"
FunctionExamplesTemplate: relative "wikidocs/function.examples.template.md"
FunctionAttributesTemplate: relative "wikidocs/function.attributes.template.md"

modules: []
functions: #[]

docsFolder: "../docs/wiki"

; get modules and functions

loop symbols [sym][
    inf: info.get sym

    if key? inf 'module [
        fun: inf\name
        lib: inf\module
        append 'modules lib
        if not? key? functions lib [
            set functions lib []
        ]
        set functions lib append (get functions lib) fun
    ]
]

unique 'modules

; generate main index

contents: join.with:"\n" map modules [md][
    ~"- [|md|](Library-‣-|md|)"
]

fs: new []

loop functions [md,fns][
    loop fns 'fn [
        'fs ++ ~{|replace fn "?" "AA"|</a>}
    ]
]

aIndexOld: map sort fs => [replace & "AA" "?"]
aIndex: new []

loop aIndexOld 'io [
    loop functions [md,fns][
        cleanIo: replace replace io "AA" "?" "</a>" ""
        if contains? fns cleanIo [
            'aIndex ++ (~{<a href="Library-‣-|md|#|cleanIo|">} ++ io)
        ]
    ]
]

sIndex: map select aIndex => [
    key? info.get first map match & {>(.+)<} 'x [
        replace replace x ">" "" "<" ""
    ] 'alias
] 'z [
    fun: first map match z {>(.+)<} 'x [replace replace x ">" "" "<" ""]
    ali: get info.get fun 'alias
    ali: replace ali "<" "&lt;"
    ali: replace ali ">" "&gt;"
    replace z ~">|fun|<" ~"><b>|ali|</b><"
]

write relative ~"|docsFolder|/Library.md" (render.single read IndexTemplate)
write relative ~"|docsFolder|/_Sidebar.md" (render.single read SidebarTemplate)

; generate library pages

loop functions [md,fns][
    indx: join.with:"\n" map fns [fn][
        ~"   * [|fn|](#|fn|)"
    ]
    contents: join.with:"\n\n" map fns [f][
        fn: info.get f
        alias: ""
        if key? fn 'alias [
            alias: ~"\n**Alias:** `|fn\alias|`\n"
        ]
        examples: ""
        if key? fn 'example [
            if 10 < size fn\example [
                example: replace fn\example "_" " "
                examples: render.single read FunctionExamplesTemplate
            ]
        ]
        attributos: ""
        if not? empty? fn\attrs [
            attributos: new read FunctionAttributesTemplate

            loop fn\attrs [k,at][
                append 'attributos 
                    "|" ++ k ++ 
                    "|" ++ "<i>:" ++ (to :string first at\types) ++ "</i>" ++
                    "|" ++ (at\description) ++
                    "|" ++ "\n"
            ]
        ]
        pars: new []

        loop (fn\args) [k,params][
            typestring: join.with: " " map params [p]["<i>:" ++ (to :string p) ++ "</i>"]
            append 'pars ~"<ins>|k|</ins> |typestring|"

        ]
        pre: new ""
        loop 1 + size fn\name [i][
            append 'pre " "
        ]
        usage: join.with:~"\n|pre|" pars
        returns: join.with:"\n" map get fn 'returns [ret][
            "- *:" ++ (to :string ret) ++ "*"
        ]
        replace render.single read FunctionTemplate "%ATTRIBS%" attributos
    ]
    write relative ~"|docsFolder|/Library-‣-|md|.md" (render.single read LibraryTemplate) ++ contents
]

; inspect sort fs