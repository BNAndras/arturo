;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Arturo
;; Programming Language + Bytecode VM compiler
;; (c) 2019-2020 Yanis Zafirópulos
;;
;; @file: tools/docgen.art
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

functionsByLib: #[]
examples: []

parseExamples: function[l,i][
	print ["parsing examples for library:" l "function:" i]
	if ""=strip i -> return ""

	lines: read.lines l
	example: []

	indx: 0
	while [indx<size lines] [
		line: lines \ indx
		if in? line ~"template |i|" [
			indx: indx+1
			if in? (lines \ indx) "# EXAMPLE:" [
				print "found example!!!"
				indx: indx+1
				while [in? (lines \ indx) "#"][
					exampleLine: strip lines \ indx
					exampleLine: replace strip slice exampleLine 1 (size exampleLine)-1 "_" " "
					example: example ++ exampleLine
					indx: indx+1
				]
			]
		]
		indx: indx+1
	]
	join.with:"\n" example
]

getFunctionsByLib: function[][
	libs: sort list relative "../src/vm/library"
	loop libs 'lib [

		if and? lib<>"src/vm/library/.DS_Store" not? in? lib "internal" [
			funcsInLib: sort map unique select map 
				match read lib "template [A-Za-z]+"
				'x [ strip replace x "template " ""]
				'y [ (to :string y\0) = upper to :string y\0 ]
				'z [
					initial: z
					result: z
					if? suffix? z "E" [ result: replace z .regex "E$" "?" ]
					else [ 
						if? or? prefix? z "Has" prefix? z "Is" [
							stripped: suffix replace replace z "Has" "" "Is" "" "?"

							if? stripped="?" [ result: "is?" ]
							else [ result: stripped ]
						]
						else [
							if? prefix? z "Get" [result: replace z "Get" ""]
							else [result: replace z "Make" ""]
						]
					]
					final: (lower to :string result\0) ++ slice result 1 (size result)-1
					append 'examples @[@[final parseExamples lib initial]]
					
					final
				]

			;inspect funcsInLib
			set functionsByLib replace replace lib "src/vm/library/" "" ".nim" "" funcsInLib
		]
	]
]
getFunctionsByLib


funcTemplate: {
## |fname||falias|

#### Description

|fdescription|

#### Usage

<pre>
<b>|fname|</b> |fusage|
</pre>|fattrs|

#### Returns

|fret||fexam|
}

tocTemplate: 
{

<!--ts-->
   * [The Language](#the-language)
   * [The Compiler](#the-compiler)
   * [Trying it out](#trying-it-out)
      * [Online](#online)
      * [Manually](#manually)
        * [Prerequisites](#prerequisites)
        * [Build & Install Arturo](#build--install-arturo)
      * [Docker](#docker)
   * [Using the command line](#using-the-command-line)
      * [Run a script](#run-a-script)
      * [Interactive console (REPL)](#interactive-console--repl)
   * [Editors & IDEs](#editors--ides)
   * [Roadmap](#roadmap)
   * [Contributing](#contributing)
   * [License](#license)
<!--te-->

}

inspect examples

loop functionsByLib [lib,functions][
	if lib<>"sys" [
		libMd: ""
		toc: "### Functions\n\n---\n\n<!--ts-->\n"
		loop functions 'func [
			print func
			;exampl: get examples to :string func
			if null<>info.get func [
				funcLink: func

				if in? funcLink "?" [
					funcLink: replace funcLink "?" ""

					if in? functions funcLink [
						funcLink: funcLink ++ "-1"
					]
				]
				toc: toc ++ ~"   * [|func|](#|funcLink|)\n"
				funcInfo: info.get func

				fname: funcInfo\name
				fdescription: capitalize funcInfo\description
				falias: ""
				if ""<>funcInfo\alias [ falias: "\n\n**Alias:** `" ++ (funcInfo\alias) ++ "`" ]
				fret: join.with:"  \n" map funcInfo \ "return" 'x ["- *:" ++ (to :string x) ++ "*"]
				fusagepre: new []
				loop funcInfo\arguments 'arg [
					aname: arg\name
					atype: join .with:" " map arg \ "type" 'z ["<i>:" ++ (to :string z) ++ "</i>"]
					'fusagepre ++ ("<ins>" ++ aname ++ "</ins> " ++ atype)
				]
				tabbing: "\n" ++ join map 1..(size fname)+1 'x [" "]
				fusage: join .with:tabbing fusagepre
				fattrs: ""
				if 0<size funcInfo\attributes [
					fattrs:"\n\n#### Attributes\n\n"

					pipe: to :string to :char 124
					
					fattrs: fattrs ++ pipe ++ "Attribute" ++ pipe ++ "Type" ++ pipe ++ "Description" ++ pipe ++ "\n"
					fattrs: fattrs ++ pipe ++ "---" ++ pipe ++ "---" ++ pipe ++ "---" ++ pipe ++ "\n"

					loop funcInfo\attributes 'attrb [
						params: join.with:" " map attrb\parameters 'param ["<i>:" ++ (to :string param) ++ "</i>"]
						fattrs: fattrs ++ pipe ++ attrb\name ++ pipe ++ params ++ pipe ++ attrb\action ++ pipe ++ "\n"
					]
				]
				fexam: new ""

				fexams: select examples 'x [ and? x\0=func x\1<>"" ]

				print ["got" fexams]

				if not? empty? fexams [
					fexam: "\n\n" ++ render {
					#### Examples

					```red
					|fexams\0\1|
					```

					}
				]
				
				; loop examples 'exam [
				; 	;print [exam\0 "->" exam\1]
					
				; 	if (exam\0)=to :string func [
				; 		print "FOUND!!!!"
				; 		fexam: exam\1
				; 	]
				; ]
				; 	if k=to :string func [
				; 		print [k "=>" v]
				; 		if v<>"" [
				; 			print ["found!!:" v]
				; 			fexam: v
				; 		]
				; 	]
				; ]
				;print ["examples for:" func "->" examples \ to :string func]

				libMd: libMd ++ "\n\n" ++ render funcTemplate
			]
		]
		toc: toc ++ "\n<!--te-->\n\n---"
		write relative ~"../../arturo.wiki/Library-‣-|lib|.md" toc++libMd++"\n"
	]
]

loop functionsByLib [lib,functions][
	print "- #### [" ++ lib ++  "](Library-‣-" ++ lib ++ ")"
]