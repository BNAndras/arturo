#!/usr/bin/env arturo

getContent: function [title][
    sanitized: replace title " " "_"

    content: read.json ~"http://rosettacode.org/mw/api.php?action=query&prop=revisions&titles=|sanitized|&rvslots=*&rvprop=content&format=json"
    content: content\query\pages 
    content: content \ first keys content
    if? key? content 'revisions [
        lines: split.lines (content\revisions\0) \ "*"

        start: @[0 0 lines]

        loop.with:'i lines 'line [
            if contains? line "=={{header|" [
                language: strip replace replace line "=={{header|" "" "}}==" ""
                if contains? language "Arturo" [
                    start\0: i-1
                ]
                if language > "Arturo" [
                    start\1: i-1
                    if start\0 = 0 [
                        start\0: i-1
                    ]
                    return start
                ]
            ]
        ]
    ]
    else [
        return ø
    ]
]

updateCode: function [title][
    content: getContent title
    if null? content -> return ø

    start: content\0
    stop: content\1
    lines: content\2

    source: read ~"examples/rosetta/|title|.art"
    output: ""
    if exists? ~"examples/rosetta/|title|.res" [
        output: read ~"examples/rosetta/|title|.res"
    ]

    code: render.template
    ---
=={{header|Arturo}}==

<lang rebol><|source|></lang>
    ---

    if output <> "" [
        code: code ++ render.template
        ---
{{out}}

<pre><|output|></pre>
        ---
    ]

    if? start=stop [
        insert 'lines start code
        return join.with:"\n" lines
    ]
    else [
        code: ((first.n: start lines) ++ @[code]) ++ (last.n: (size lines)-stop lines)
        return join.with:"\n" code
    ]
]

; print updateCode "1000 doors"
files:
    sort
    select 
        map
            select list relative "../examples/rosetta" => [suffix? & ".art"]
        'file [
            replace
                replace file "examples/rosetta/" ""
                ".art" ""
        ]
    => [not? prefix? & "_"]

loop files 'file [
    print ["-" file "=>" if? not? null? updateCode file -> color.green "OK" else -> color.red "error"]
]

