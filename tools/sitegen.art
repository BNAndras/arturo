#!/usr/bin/env arturo

modules: []
functions: #[]
relatedFuncs: #[]

; get modules and functions

loop symbols [sym][
    print ["processing:" sym]
    inf: info.get sym

    if key? inf 'module [
        fun: inf\name
        lib: inf\module
        append 'modules lib
        if not? key? functions lib [
            set functions lib []
        ]
        set functions lib append (get functions lib) fun


        levD: 100
        related: new #[]
        loop symbols [sym2][
            inf2: info.get sym2

            if and? key? inf2 'module
                    inf <> inf2 [
                set related new ~"|capitalize lib|/|sym2|"  levenshtein inf\description inf2\description
            ]
        ]
        ;inspect sort.values related
        set relatedFuncs sym first.n: 4 keys sort.values related
        ; inspect relatedFuncs
    ]
]

inspect relatedFuncs

unique 'modules

inspect functions

loop functions [modl,lst][
    target: relative join.path @["../../webize/artdoc/pages/library" lower modl]
    write.directory target Ã¸

    loop lst 'func [
        funcInfo:  info.get func
        attributes: funcInfo\attrs
        funcInfo: remove.key funcInfo 'attrs
        funcInfo\attributes: attributes
        funcInfo\related: get relatedFuncs func
        funcInfo: strip as.pretty.code.unwrapped funcInfo

        inspect funcInfo
        
        print join.path @[target ~"|func|.art"]
        write join.path @[target ~"|func|.art"] funcInfo
    ]
]